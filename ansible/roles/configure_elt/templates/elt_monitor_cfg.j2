<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!-- ************************************************** -->
<!-- **                                                 -->
<!-- **        DISH MONITOR CONFIGURATION          -->
<!-- **                                                 -->
<!-- ************************************************** -->

<DeviceConfiguration>
		
	<!-- ************************************************** -->
	<!-- **              PROPERTIES                         -->
	<!-- ************************************************** -->
	<DeviceProperties>

		<!-- SKA options -->
		<DeviceProperty name="SkaLevel">
			<Value> {{dshmon_ska_level}} </Value>
		</DeviceProperty>

		
		<!-- General options -->
		<DeviceProperty name="EnableConfigFromFile">
			<Value> {{dshmon_enable_config_from_file}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ConfigFile">
			<Value> {{dshmon_config_file}} </Value>
		</DeviceProperty>

		<!-- Dyn attr creation and update options -->
		<DeviceProperty name="EnableDynAttrCleanup">
			<Value> {{dshmon_enable_dyn_attr_cleanup}} </Value>
		</DeviceProperty>

		<DeviceProperty name="EnableDynAttrRandomize">
			<Value> {{dshmon_enable_dyn_attr_randomize}} </Value>
		</DeviceProperty>

		<DeviceProperty name="DynAttrRandomizePeriod">
			<Value> {{dshmon_dyn_attr_randomize_period}} </Value>
		</DeviceProperty>

		<DeviceProperty name="EnableFwdAttrInitPolling">
			<Value> {{dshmon_enable_fwd_attr_init_polling}} </Value>
		</DeviceProperty>

		<DeviceProperty name="FwdAttrInitPollPeriod">
			<Value> {{dshmon_fwd_attr_init_poll_period}} </Value>
		</DeviceProperty>

		<DeviceProperty name="EnableStatusAttrUpdatePolling">
			<Value> {{dshmon_enable_status_attr_update_polling}} </Value>
		</DeviceProperty>

		<DeviceProperty name="StatusAttrUpdatePollPeriod">
			<Value> {{dshmon_status_attr_update_poll_period}} </Value>
		</DeviceProperty>
		

		<!-- Logging options -->
		<DeviceProperty name="EnableCentralLogTarget">
			<Value> {{dshmon_enable_central_log_target}} </Value>
		</DeviceProperty>

		<DeviceProperty name="LoggingTargetCentral">
			<Value> {{dshmon_central_log_target}} </Value>
		</DeviceProperty>

		<DeviceProperty name="LoggingLevelCentralDefault">
			<Value> {{dshmon_central_log_level}}  </Value>
		</DeviceProperty>

		<DeviceProperty name="EnableElementLogTarget">
			<Value> {{dshmon_enable_element_log_target}} </Value>
		</DeviceProperty>
		
		<DeviceProperty name="LoggingTargetElement">
			<Value> {{dshmon_element_log_target}} </Value>
		</DeviceProperty>

		<DeviceProperty name="LoggingLevelElementDefault">
			<Value> {{dshmon_element_log_level}} </Value>
		</DeviceProperty>
		
		<DeviceProperty name="EnableStorageLogTarget">
			<Value> {{dshmon_enable_storage_log_target}} </Value>
		</DeviceProperty>

		<DeviceProperty name="LoggingTargetStorage">
			<Value> {{dshmon_storage_log_target}} </Value>
		</DeviceProperty>

		<DeviceProperty name="LoggingLevelStorageDefault">
			<Value> {{dshmon_storage_log_level}} </Value>
		</DeviceProperty>

		<DeviceProperty name="SyslogFacility">
			<Value> {{dshmon_syslog_facility}} </Value>
		</DeviceProperty>

		<DeviceProperty name="SyslogHost">
			<Value> {{dshmon_syslog_host}} </Value>
		</DeviceProperty>

		<DeviceProperty name="EnableLoggerInitPolling">
			<Value> {{dshmon_enable_logger_init_polling}} </Value>
		</DeviceProperty>

		<DeviceProperty name="LoggerInitPollPeriod">
			<Value> {{dshmon_logger_init_poll_period}} </Value>
		</DeviceProperty>


		<!-- Proxy options -->
		<DeviceProperty name="EnableProxyMonitoring">
			<Value> {{dshmon_enable_proxy_monitoring}} </Value>
		</DeviceProperty>

		<DeviceProperty name="EnableProxyStatusAttrCreation">
			<Value> {{dshmon_enable_proxy_status_attr_creation}} </Value>
		</DeviceProperty>

		<DeviceProperty name="EnableAutoAdminProxyRegistration">
			<Value> {{dshmon_enable_auto_admin_proxy_registration}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ProxyMonitoringPeriod">
			<Value> {{dshmon_proxy_monitoring_period}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ProxyStatusAttrPollingPeriod">
			<Value> {{dshmon_proxy_status_attr_polling_period}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ProxyStatusAttrPeriodicEventPeriod">
			<Value> {{dshmon_proxy_status_attr_periodic_event_period}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ProxyStatusAttrArchiveEventPeriod">
			<Value> {{dshmon_proxy_status_attr_archive_event_period}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ProxyTimeout">
			<Value> {{dshmon_proxy_timeout}} </Value>
		</DeviceProperty>

		<DeviceProperty name="EnableDevProxyInitPolling">
			<Value> {{dshmon_enable_dev_proxy_init_polling}} </Value>
		</DeviceProperty>

		<DeviceProperty name="DevProxyInitPollPeriod">
			<Value> {{dshmon_dev_proxy_init_poll_period}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ProxyDevices">
			{% if lmc_config_mode == 'full' or lmc_config_mode == 'rx' %}
			<Value> {{rx_controller}} </Value>
			{% endif %}
	
			{% if lmc_config_mode == 'full' or lmc_config_mode == 'spf' %}
			<Value> {{spf_controller}} </Value>
			{% endif %}

			{% if lmc_config_mode == 'full' or lmc_config_mode == 'ds' %}
			<Value> tango://{{lmc_tango_hostname}}:{{lmc_tango_port}}/{{lmc_domain_name}}/lmc/ds_manager </Value>
			{% endif %}
		</DeviceProperty>
		

		<!-- Formula options -->
		<DeviceProperty name="EnableFormulaAttrUpdatePolling">
			<Value> {{dshmon_enable_formula_attr_update_polling}} </Value>
		</DeviceProperty>

		<DeviceProperty name="FormulaAttrUpdatePollPeriod">
			<Value> {{dshmon_formula_attr_update_poll_period}} </Value>
		</DeviceProperty>

		<DeviceProperty name="FormulaVarMaxTimeInterval">
			<Value> {{dshmon_formula_var_max_time_interval}} </Value>
		</DeviceProperty>


		<!-- Events and handlers options -->
		<!--
		<DeviceProperty name="EventSubscriptions">	
				
		</DeviceProperty>
		-->

		<!--
		<DeviceProperty name="EventHandlers">				
			
		</DeviceProperty>
		-->
	
		<!-- Task management options -->
		<DeviceProperty name="MaxQueueableTask">
			<Value> {{dshmon_max_queuable_tasks}} </Value>
		</DeviceProperty>
	
		<DeviceProperty name="MaxTrackableTasks">
			<Value> {{dshmon_max_trackable_tasks}} </Value>
		</DeviceProperty>

		<DeviceProperty name="TaskHistoryTimeDepth">
			<Value> {{dshmon_task_history_time_depth}} </Value>
		</DeviceProperty>

		<DeviceProperty name="DefaultTaskTimeout">
			<Value> {{dshmon_default_task_timeout}} </Value>
		</DeviceProperty>

		<!--
		<DeviceProperty name="TaskStatusAttrList">			
			<Value> </Value>	
		</DeviceProperty>
		-->

		<!--
		<DeviceProperty name="TaskSequenceStatusAttrList">
			<Value>  </Value>
		</DeviceProperty>
		-->
		
  
		<DeviceProperty name="EnableClearTaskPolling">
			<Value> {{dshmon_enable_clear_task_polling}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ClearTaskPollPeriod">
			<Value> {{dshmon_clear_task_poll_period}} </Value>
		</DeviceProperty>
	
		<DeviceProperty name="ProcessEventsInQueueThread">
			<Value> {{process_events_in_queue_thread}} </Value>
		</DeviceProperty>
		
		<!-- ================================= -->
		<!-- ==     SPECIFIC PROPERTIES        -->
		<!-- ================================= -->
		
	</DeviceProperties>


	<!-- ************************************************** -->
	<!-- **              ATTRIBUTES                         -->
	<!-- ************************************************** -->
	<Attributes>

		<!-- ************************************************** -->
		<!-- **      Modes and States Attributes                -->
		<!-- ************************************************** -->
	
		{% if lmc_config_mode == 'full' or lmc_config_mode == 'spf' %}
		<Attribute name = "spfCtrlOutOfRange" alias="spfCtrlOutOfRange">
			<Description> SPF Controller out of range (temp, voltage, current) </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var voltStatus:= 'UNKNOWN';
					var tempStatus:= 'UNKNOWN';
					var currStatus:= 'UNKNOWN';
			 
					/* Voltage alarm status */
					if(volt &lt; {{spf_ctrl_volt_min_alarm}} or volt &gt; {{spf_ctrl_volt_max_alarm}}) voltStatus:= 'ALARM';
					else if(volt &lt; {{spf_ctrl_volt_min_warn}} or volt &gt; {{spf_ctrl_volt_max_warn}}) voltStatus:= 'WARN';
					else voltStatus:= 'NORMAL';

					/* Temperature alarm status */
					if(temp &lt; {{spf_ctrl_temp_min_alarm}} or temp &gt; {{spf_ctrl_temp_max_alarm}}) tempStatus:= 'ALARM';
					else if(temp &lt; {{spf_ctrl_temp_min_warn}} or temp &gt; {{spf_ctrl_temp_max_warn}}) tempStatus:= 'WARN';
					else tempStatus:= 'NORMAL';

					/* Current alarm status */
					if(curr &lt; {{spf_ctrl_curr_min_alarm}} or curr &gt; {{spf_ctrl_curr_max_alarm}}) currStatus:= 'ALARM';
					else if(curr &lt; {{spf_ctrl_curr_min_warn}} or curr &gt; {{spf_ctrl_curr_max_warn}}) currStatus:= 'WARN';
					else currStatus:= 'NORMAL';

					/* Global alarm status */
					if( voltStatus=='ALARM' or tempStatus=='ALARM' or currStatus=='ALARM' )
					{
						res:= 'ALARM';
						return [0];
					};
					if( voltStatus=='WARN' or tempStatus=='WARN' or currStatus=='WARN' )
					{
						res:= 'WARN';
						return [0];
					};
	 				if( voltStatus=='NORMAL' and tempStatus=='NORMAL' and currStatus=='NORMAL' )
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> volt </Label>	
						<Value> {{spf_controller}}/spfcSupplyVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp </Label>	
						<Value> {{spf_controller}}/spfcTemperature </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
					<FormulaVar>
						<Label> curr </Label>	
						<Value> {{spf_controller}}/spfcSupplyCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}


		{% if lmc_config_mode == 'full' or lmc_config_mode == 'spf' %}
		<Attribute name = "spfHePressureOutOfRange" alias="spfHePressureOutOfRange">
			<Description> SPF Helium system pressure out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var pSupplStatus:= 'UNKNOWN';
					var pRetStatus:= 'UNKNOWN';
					
					/* He supply pressure status */
					if(p_sup &lt; {{spf_he_suppl_press_min_alarm}} or p_sup &gt; {{spf_he_suppl_press_max_alarm}}) pSupplStatus:= 'ALARM';
					else if(p_sup &lt; {{spf_he_suppl_press_min_warn}} or p_sup &gt; {{spf_he_suppl_press_max_warn}}) pSupplStatus:= 'WARN';
					else pSupplStatus:= 'NORMAL';

					/* He return pressure alarm status */
					if(p_ret &lt; {{spf_he_ret_press_min_alarm}} or p_ret &gt; {{spf_he_ret_press_max_alarm}}) pRetStatus:= 'ALARM';
					else if(p_ret &lt; {{spf_he_ret_press_min_warn}} or p_ret &gt; {{spf_he_ret_press_max_warn}}) pRetStatus:= 'WARN';
					else pRetStatus:= 'NORMAL';

					/* Global alarm status */
					if( pSupplStatus=='ALARM' or pRetStatus=='ALARM' )
					{
						res:= 'ALARM';
						return [0];
					};
					if( pSupplStatus=='WARN' or pRetStatus=='WARN' )
					{
						res:= 'WARN';
						return [0];
					};
	 				if( pSupplStatus=='NORMAL' and pRetStatus=='NORMAL' )
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> p_sup </Label>	
						<Value> {{spf_controller}}/heCompSupplyPressure </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> p_ret </Label>	
						<Value> {{spf_controller}}/heCompReturnPressure </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}


		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b1_in_config | bool) %}
		<Attribute name = "spfB1LnaOutOfRange" alias="spfB1LnaOutOfRange">
			<Description> SPF Band 1 LNA out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var VDrainHStatus:= 'UNKNOWN';
					var VDrainVStatus:= 'UNKNOWN';
					var VGateHStatus:= 'UNKNOWN';
					var VGateVStatus:= 'UNKNOWN';
					var IDrainHStatus:= 'UNKNOWN';
					var IDrainVStatus:= 'UNKNOWN';
					var GainHStatus:= 'UNKNOWN';
					var GainVStatus:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* LNA V drain H channel status */
					if(V_drain_h &lt; {{spf_lna_drain_volt_min_alarm}} or V_drain_h &gt; {{spf_lna_drain_volt_max_alarm}}) VDrainHStatus:= 'ALARM';
					else if(V_drain_h &lt; {{spf_lna_drain_volt_min_warn}} or V_drain_h &gt; {{spf_lna_drain_volt_max_warn}}) VDrainHStatus:= 'WARN';
					else VDrainHStatus:= 'NORMAL';

					/* LNA H drain V channel status */
					if(V_drain_v &lt; {{spf_lna_drain_volt_min_alarm}} or V_drain_v &gt; {{spf_lna_drain_volt_max_alarm}}) VDrainVStatus:= 'ALARM';
					else if(V_drain_v &lt; {{spf_lna_drain_volt_min_warn}} or V_drain_v &gt; {{spf_lna_drain_volt_max_warn}}) VDrainVStatus:= 'WARN';
					else VDrainVStatus:= 'NORMAL';

					/* LNA V gate H channel status */
					if(V_gate_h &lt; {{spf_lna_gate_volt_min_alarm}} or V_gate_h &gt; {{spf_lna_gate_volt_max_alarm}}) VGateHStatus:= 'ALARM';
					else if(V_gate_h &lt; {{spf_lna_gate_volt_min_warn}} or V_gate_h &gt; {{spf_lna_gate_volt_max_warn}}) VGateHStatus:= 'WARN';
					else VGateHStatus:= 'NORMAL';

					/* LNA V gate V channel status */
					if(V_gate_v &lt; {{spf_lna_gate_volt_min_alarm}} or V_gate_v &gt; {{spf_lna_gate_volt_max_alarm}}) VGateVStatus:= 'ALARM';
					else if(V_gate_v &lt; {{spf_lna_gate_volt_min_warn}} or V_gate_v &gt; {{spf_lna_gate_volt_max_warn}}) VGateVStatus:= 'WARN';
					else VGateVStatus:= 'NORMAL';

					/* LNA I drain H channel status */
					if(I_drain_h &lt; {{spf_lna_drain_curr_min_alarm}} or I_drain_h &gt; {{spf_lna_drain_curr_max_alarm}}) IDrainHStatus:= 'ALARM';
					else if(I_drain_h &lt; {{spf_lna_drain_curr_min_warn}} or I_drain_h &gt; {{spf_lna_drain_curr_max_warn}}) IDrainHStatus:= 'WARN';
					else IDrainHStatus:= 'NORMAL';

					/* LNA I drain V channel status */
					if(I_drain_v &lt; {{spf_lna_drain_curr_min_alarm}} or I_drain_v &gt; {{spf_lna_drain_curr_max_alarm}}) IDrainVStatus:= 'ALARM';
					else if(I_drain_v &lt; {{spf_lna_drain_curr_min_warn}} or I_drain_v &gt; {{spf_lna_drain_curr_max_warn}}) IDrainVStatus:= 'WARN';
					else IDrainVStatus:= 'NORMAL';

					/* LNA Gain avg H channel status */
					if(G_h &lt; {{spf_lna_mean_gain_min_alarm}} or G_h &gt; {{spf_lna_mean_gain_max_alarm}}) GainHStatus:= 'ALARM';
					else if(G_h &lt; {{spf_lna_mean_gain_min_warn}} or G_h &gt; {{spf_lna_mean_gain_max_warn}}) GainHStatus:= 'WARN';
					else GainHStatus:= 'NORMAL';

					/* LNA Gain avg V channel status */
					if(G_v &lt; {{spf_lna_mean_gain_min_alarm}} or G_v &gt; {{spf_lna_mean_gain_max_alarm}}) GainVStatus:= 'ALARM';
					else if(G_v &lt; {{spf_lna_mean_gain_min_warn}} or G_v &gt; {{spf_lna_mean_gain_max_warn}}) GainVStatus:= 'WARN';
					else GainVStatus:= 'NORMAL';
				
					/* Global alarm status */
					if( VDrainHStatus=='ALARM' or VDrainVStatus=='ALARM' or VGateHStatus=='ALARM' or VGateVStatus=='ALARM' or IDrainHStatus=='ALARM' or IDrainVStatus=='ALARM' or GainHStatus=='ALARM' or GainVStatus=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( VDrainHStatus=='WARN' or VDrainVStatus=='WARN' or VGateHStatus=='WARN' or VGateVStatus=='WARN' or IDrainHStatus=='WARN' or IDrainVStatus=='WARN' or GainHStatus=='WARN' or GainVStatus=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( VDrainHStatus=='NORMAL' and VDrainVStatus=='NORMAL' and VGateHStatus=='NORMAL' and VGateVStatus=='NORMAL' and IDrainHStatus=='NORMAL' and IDrainVStatus=='NORMAL' and GainHStatus=='NORMAL' and GainVStatus=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b1ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_drain_h </Label>	
						<Value> {{spf_controller}}/b1LnaHDrainVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_drain_v </Label>	
						<Value> {{spf_controller}}/b1LnaVDrainVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_gate_h </Label>	
						<Value> {{spf_controller}}/b1LnaHGateVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_gate_v </Label>	
						<Value> {{spf_controller}}/b1LnaVGateVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
					<FormulaVar>
						<Label> I_drain_h </Label>	
						<Value> {{spf_controller}}/b1LnaHDrainCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_drain_v </Label>	
						<Value> {{spf_controller}}/b1LnaVDrainCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> G_h </Label>	
						<Value> {{spf_controller}}/b1LnaHMeanGain </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> G_v </Label>	
						<Value> {{spf_controller}}/b1LnaVMeanGain </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b2_in_config | bool) %}
		<Attribute name = "spfB2LnaOutOfRange" alias="spfB2LnaOutOfRange">
			<Description> SPF Band 2 LNA out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var VDrainHStatus:= 'UNKNOWN';
					var VDrainVStatus:= 'UNKNOWN';
					var VGateHStatus:= 'UNKNOWN';
					var VGateVStatus:= 'UNKNOWN';
					var IDrainHStatus:= 'UNKNOWN';
					var IDrainVStatus:= 'UNKNOWN';
					var GainHStatus:= 'UNKNOWN';
					var GainVStatus:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* LNA V drain H channel status */
					if(V_drain_h &lt; {{spf_lna_drain_volt_min_alarm}} or V_drain_h &gt; {{spf_lna_drain_volt_max_alarm}}) VDrainHStatus:= 'ALARM';
					else if(V_drain_h &lt; {{spf_lna_drain_volt_min_warn}} or V_drain_h &gt; {{spf_lna_drain_volt_max_warn}}) VDrainHStatus:= 'WARN';
					else VDrainHStatus:= 'NORMAL';

					/* LNA H drain V channel status */
					if(V_drain_v &lt; {{spf_lna_drain_volt_min_alarm}} or V_drain_v &gt; {{spf_lna_drain_volt_max_alarm}}) VDrainVStatus:= 'ALARM';
					else if(V_drain_v &lt; {{spf_lna_drain_volt_min_warn}} or V_drain_v &gt; {{spf_lna_drain_volt_max_warn}}) VDrainVStatus:= 'WARN';
					else VDrainVStatus:= 'NORMAL';

					/* LNA V gate H channel status */
					if(V_gate_h &lt; {{spf_lna_gate_volt_min_alarm}} or V_gate_h &gt; {{spf_lna_gate_volt_max_alarm}}) VGateHStatus:= 'ALARM';
					else if(V_gate_h &lt; {{spf_lna_gate_volt_min_warn}} or V_gate_h &gt; {{spf_lna_gate_volt_max_warn}}) VGateHStatus:= 'WARN';
					else VGateHStatus:= 'NORMAL';

					/* LNA V gate V channel status */
					if(V_gate_v &lt; {{spf_lna_gate_volt_min_alarm}} or V_gate_v &gt; {{spf_lna_gate_volt_max_alarm}}) VGateVStatus:= 'ALARM';
					else if(V_gate_v &lt; {{spf_lna_gate_volt_min_warn}} or V_gate_v &gt; {{spf_lna_gate_volt_max_warn}}) VGateVStatus:= 'WARN';
					else VGateVStatus:= 'NORMAL';

					/* LNA I drain H channel status */
					if(I_drain_h &lt; {{spf_lna_drain_curr_min_alarm}} or I_drain_h &gt; {{spf_lna_drain_curr_max_alarm}}) IDrainHStatus:= 'ALARM';
					else if(I_drain_h &lt; {{spf_lna_drain_curr_min_warn}} or I_drain_h &gt; {{spf_lna_drain_curr_max_warn}}) IDrainHStatus:= 'WARN';
					else IDrainHStatus:= 'NORMAL';

					/* LNA I drain V channel status */
					if(I_drain_v &lt; {{spf_lna_drain_curr_min_alarm}} or I_drain_v &gt; {{spf_lna_drain_curr_max_alarm}}) IDrainVStatus:= 'ALARM';
					else if(I_drain_v &lt; {{spf_lna_drain_curr_min_warn}} or I_drain_v &gt; {{spf_lna_drain_curr_max_warn}}) IDrainVStatus:= 'WARN';
					else IDrainVStatus:= 'NORMAL';

					/* LNA Gain avg H channel status */
					if(G_h &lt; {{spf_lna_mean_gain_min_alarm}} or G_h &gt; {{spf_lna_mean_gain_max_alarm}}) GainHStatus:= 'ALARM';
					else if(G_h &lt; {{spf_lna_mean_gain_min_warn}} or G_h &gt; {{spf_lna_mean_gain_max_warn}}) GainHStatus:= 'WARN';
					else GainHStatus:= 'NORMAL';

					/* LNA Gain avg V channel status */
					if(G_v &lt; {{spf_lna_mean_gain_min_alarm}} or G_v &gt; {{spf_lna_mean_gain_max_alarm}}) GainVStatus:= 'ALARM';
					else if(G_v &lt; {{spf_lna_mean_gain_min_warn}} or G_v &gt; {{spf_lna_mean_gain_max_warn}}) GainVStatus:= 'WARN';
					else GainVStatus:= 'NORMAL';
				
					/* Global alarm status */
					if( VDrainHStatus=='ALARM' or VDrainVStatus=='ALARM' or VGateHStatus=='ALARM' or VGateVStatus=='ALARM' or IDrainHStatus=='ALARM' or IDrainVStatus=='ALARM' or GainHStatus=='ALARM' or GainVStatus=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( VDrainHStatus=='WARN' or VDrainVStatus=='WARN' or VGateHStatus=='WARN' or VGateVStatus=='WARN' or IDrainHStatus=='WARN' or IDrainVStatus=='WARN' or GainHStatus=='WARN' or GainVStatus=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( VDrainHStatus=='NORMAL' and VDrainVStatus=='NORMAL' and VGateHStatus=='NORMAL' and VGateVStatus=='NORMAL' and IDrainHStatus=='NORMAL' and IDrainVStatus=='NORMAL' and GainHStatus=='NORMAL' and GainVStatus=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b2ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_drain_h </Label>	
						<Value> {{spf_controller}}/b2LnaHDrainVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_drain_v </Label>	
						<Value> {{spf_controller}}/b2LnaVDrainVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_gate_h </Label>	
						<Value> {{spf_controller}}/b2LnaHGateVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_gate_v </Label>	
						<Value> {{spf_controller}}/b2LnaVGateVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
					<FormulaVar>
						<Label> I_drain_h </Label>	
						<Value> {{spf_controller}}/b2LnaHDrainCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_drain_v </Label>	
						<Value> {{spf_controller}}/b2LnaVDrainCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> G_h </Label>	
						<Value> {{spf_controller}}/b2LnaHMeanGain </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> G_v </Label>	
						<Value> {{spf_controller}}/b2LnaVMeanGain </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}


		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b3_in_config | bool) %}
		<Attribute name = "spfB3LnaOutOfRange" alias="spfB3LnaOutOfRange">
			<Description> SPF Band 3 LNA out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var VDrainHStatus:= 'UNKNOWN';
					var VDrainVStatus:= 'UNKNOWN';
					var VGateHStatus:= 'UNKNOWN';
					var VGateVStatus:= 'UNKNOWN';
					var IDrainHStatus:= 'UNKNOWN';
					var IDrainVStatus:= 'UNKNOWN';
					var GainHStatus:= 'UNKNOWN';
					var GainVStatus:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* LNA V drain H channel status */
					if(V_drain_h &lt; {{spf_lna_drain_volt_min_alarm}} or V_drain_h &gt; {{spf_lna_drain_volt_max_alarm}}) VDrainHStatus:= 'ALARM';
					else if(V_drain_h &lt; {{spf_lna_drain_volt_min_warn}} or V_drain_h &gt; {{spf_lna_drain_volt_max_warn}}) VDrainHStatus:= 'WARN';
					else VDrainHStatus:= 'NORMAL';

					/* LNA H drain V channel status */
					if(V_drain_v &lt; {{spf_lna_drain_volt_min_alarm}} or V_drain_v &gt; {{spf_lna_drain_volt_max_alarm}}) VDrainVStatus:= 'ALARM';
					else if(V_drain_v &lt; {{spf_lna_drain_volt_min_warn}} or V_drain_v &gt; {{spf_lna_drain_volt_max_warn}}) VDrainVStatus:= 'WARN';
					else VDrainVStatus:= 'NORMAL';

					/* LNA V gate H channel status */
					if(V_gate_h &lt; {{spf_lna_gate_volt_min_alarm}} or V_gate_h &gt; {{spf_lna_gate_volt_max_alarm}}) VGateHStatus:= 'ALARM';
					else if(V_gate_h &lt; {{spf_lna_gate_volt_min_warn}} or V_gate_h &gt; {{spf_lna_gate_volt_max_warn}}) VGateHStatus:= 'WARN';
					else VGateHStatus:= 'NORMAL';

					/* LNA V gate V channel status */
					if(V_gate_v &lt; {{spf_lna_gate_volt_min_alarm}} or V_gate_v &gt; {{spf_lna_gate_volt_max_alarm}}) VGateVStatus:= 'ALARM';
					else if(V_gate_v &lt; {{spf_lna_gate_volt_min_warn}} or V_gate_v &gt; {{spf_lna_gate_volt_max_warn}}) VGateVStatus:= 'WARN';
					else VGateVStatus:= 'NORMAL';

					/* LNA I drain H channel status */
					if(I_drain_h &lt; {{spf_lna_drain_curr_min_alarm}} or I_drain_h &gt; {{spf_lna_drain_curr_max_alarm}}) IDrainHStatus:= 'ALARM';
					else if(I_drain_h &lt; {{spf_lna_drain_curr_min_warn}} or I_drain_h &gt; {{spf_lna_drain_curr_max_warn}}) IDrainHStatus:= 'WARN';
					else IDrainHStatus:= 'NORMAL';

					/* LNA I drain V channel status */
					if(I_drain_v &lt; {{spf_lna_drain_curr_min_alarm}} or I_drain_v &gt; {{spf_lna_drain_curr_max_alarm}}) IDrainVStatus:= 'ALARM';
					else if(I_drain_v &lt; {{spf_lna_drain_curr_min_warn}} or I_drain_v &gt; {{spf_lna_drain_curr_max_warn}}) IDrainVStatus:= 'WARN';
					else IDrainVStatus:= 'NORMAL';

					/* LNA Gain avg H channel status */
					if(G_h &lt; {{spf_lna_mean_gain_min_alarm}} or G_h &gt; {{spf_lna_mean_gain_max_alarm}}) GainHStatus:= 'ALARM';
					else if(G_h &lt; {{spf_lna_mean_gain_min_warn}} or G_h &gt; {{spf_lna_mean_gain_max_warn}}) GainHStatus:= 'WARN';
					else GainHStatus:= 'NORMAL';

					/* LNA Gain avg V channel status */
					if(G_v &lt; {{spf_lna_mean_gain_min_alarm}} or G_v &gt; {{spf_lna_mean_gain_max_alarm}}) GainVStatus:= 'ALARM';
					else if(G_v &lt; {{spf_lna_mean_gain_min_warn}} or G_v &gt; {{spf_lna_mean_gain_max_warn}}) GainVStatus:= 'WARN';
					else GainVStatus:= 'NORMAL';
				
					/* Global alarm status */
					if( VDrainHStatus=='ALARM' or VDrainVStatus=='ALARM' or VGateHStatus=='ALARM' or VGateVStatus=='ALARM' or IDrainHStatus=='ALARM' or IDrainVStatus=='ALARM' or GainHStatus=='ALARM' or GainVStatus=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( VDrainHStatus=='WARN' or VDrainVStatus=='WARN' or VGateHStatus=='WARN' or VGateVStatus=='WARN' or IDrainHStatus=='WARN' or IDrainVStatus=='WARN' or GainHStatus=='WARN' or GainVStatus=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( VDrainHStatus=='NORMAL' and VDrainVStatus=='NORMAL' and VGateHStatus=='NORMAL' and VGateVStatus=='NORMAL' and IDrainHStatus=='NORMAL' and IDrainVStatus=='NORMAL' and GainHStatus=='NORMAL' and GainVStatus=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b3ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_drain_h </Label>	
						<Value> {{spf_controller}}/b3LnaHDrainVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_drain_v </Label>	
						<Value> {{spf_controller}}/b3LnaVDrainVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_gate_h </Label>	
						<Value> {{spf_controller}}/b3LnaHGateVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_gate_v </Label>	
						<Value> {{spf_controller}}/b3LnaVGateVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
					<FormulaVar>
						<Label> I_drain_h </Label>	
						<Value> {{spf_controller}}/b3LnaHDrainCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_drain_v </Label>	
						<Value> {{spf_controller}}/b3LnaVDrainCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> G_h </Label>	
						<Value> {{spf_controller}}/b3LnaHMeanGain </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> G_v </Label>	
						<Value> {{spf_controller}}/b3LnaVMeanGain </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}


		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b4_in_config | bool) %}
		<Attribute name = "spfB4LnaOutOfRange" alias="spfB4LnaOutOfRange">
			<Description> SPF Band 4 LNA out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var VDrainHStatus:= 'UNKNOWN';
					var VDrainVStatus:= 'UNKNOWN';
					var VGateHStatus:= 'UNKNOWN';
					var VGateVStatus:= 'UNKNOWN';
					var IDrainHStatus:= 'UNKNOWN';
					var IDrainVStatus:= 'UNKNOWN';
					var GainHStatus:= 'UNKNOWN';
					var GainVStatus:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* LNA V drain H channel status */
					if(V_drain_h &lt; {{spf_lna_drain_volt_min_alarm}} or V_drain_h &gt; {{spf_lna_drain_volt_max_alarm}}) VDrainHStatus:= 'ALARM';
					else if(V_drain_h &lt; {{spf_lna_drain_volt_min_warn}} or V_drain_h &gt; {{spf_lna_drain_volt_max_warn}}) VDrainHStatus:= 'WARN';
					else VDrainHStatus:= 'NORMAL';

					/* LNA H drain V channel status */
					if(V_drain_v &lt; {{spf_lna_drain_volt_min_alarm}} or V_drain_v &gt; {{spf_lna_drain_volt_max_alarm}}) VDrainVStatus:= 'ALARM';
					else if(V_drain_v &lt; {{spf_lna_drain_volt_min_warn}} or V_drain_v &gt; {{spf_lna_drain_volt_max_warn}}) VDrainVStatus:= 'WARN';
					else VDrainVStatus:= 'NORMAL';

					/* LNA V gate H channel status */
					if(V_gate_h &lt; {{spf_lna_gate_volt_min_alarm}} or V_gate_h &gt; {{spf_lna_gate_volt_max_alarm}}) VGateHStatus:= 'ALARM';
					else if(V_gate_h &lt; {{spf_lna_gate_volt_min_warn}} or V_gate_h &gt; {{spf_lna_gate_volt_max_warn}}) VGateHStatus:= 'WARN';
					else VGateHStatus:= 'NORMAL';

					/* LNA V gate V channel status */
					if(V_gate_v &lt; {{spf_lna_gate_volt_min_alarm}} or V_gate_v &gt; {{spf_lna_gate_volt_max_alarm}}) VGateVStatus:= 'ALARM';
					else if(V_gate_v &lt; {{spf_lna_gate_volt_min_warn}} or V_gate_v &gt; {{spf_lna_gate_volt_max_warn}}) VGateVStatus:= 'WARN';
					else VGateVStatus:= 'NORMAL';

					/* LNA I drain H channel status */
					if(I_drain_h &lt; {{spf_lna_drain_curr_min_alarm}} or I_drain_h &gt; {{spf_lna_drain_curr_max_alarm}}) IDrainHStatus:= 'ALARM';
					else if(I_drain_h &lt; {{spf_lna_drain_curr_min_warn}} or I_drain_h &gt; {{spf_lna_drain_curr_max_warn}}) IDrainHStatus:= 'WARN';
					else IDrainHStatus:= 'NORMAL';

					/* LNA I drain V channel status */
					if(I_drain_v &lt; {{spf_lna_drain_curr_min_alarm}} or I_drain_v &gt; {{spf_lna_drain_curr_max_alarm}}) IDrainVStatus:= 'ALARM';
					else if(I_drain_v &lt; {{spf_lna_drain_curr_min_warn}} or I_drain_v &gt; {{spf_lna_drain_curr_max_warn}}) IDrainVStatus:= 'WARN';
					else IDrainVStatus:= 'NORMAL';

					/* LNA Gain avg H channel status */
					if(G_h &lt; {{spf_lna_mean_gain_min_alarm}} or G_h &gt; {{spf_lna_mean_gain_max_alarm}}) GainHStatus:= 'ALARM';
					else if(G_h &lt; {{spf_lna_mean_gain_min_warn}} or G_h &gt; {{spf_lna_mean_gain_max_warn}}) GainHStatus:= 'WARN';
					else GainHStatus:= 'NORMAL';

					/* LNA Gain avg V channel status */
					if(G_v &lt; {{spf_lna_mean_gain_min_alarm}} or G_v &gt; {{spf_lna_mean_gain_max_alarm}}) GainVStatus:= 'ALARM';
					else if(G_v &lt; {{spf_lna_mean_gain_min_warn}} or G_v &gt; {{spf_lna_mean_gain_max_warn}}) GainVStatus:= 'WARN';
					else GainVStatus:= 'NORMAL';
				
					/* Global alarm status */
					if( VDrainHStatus=='ALARM' or VDrainVStatus=='ALARM' or VGateHStatus=='ALARM' or VGateVStatus=='ALARM' or IDrainHStatus=='ALARM' or IDrainVStatus=='ALARM' or GainHStatus=='ALARM' or GainVStatus=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( VDrainHStatus=='WARN' or VDrainVStatus=='WARN' or VGateHStatus=='WARN' or VGateVStatus=='WARN' or IDrainHStatus=='WARN' or IDrainVStatus=='WARN' or GainHStatus=='WARN' or GainVStatus=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( VDrainHStatus=='NORMAL' and VDrainVStatus=='NORMAL' and VGateHStatus=='NORMAL' and VGateVStatus=='NORMAL' and IDrainHStatus=='NORMAL' and IDrainVStatus=='NORMAL' and GainHStatus=='NORMAL' and GainVStatus=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b4ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_drain_h </Label>	
						<Value> {{spf_controller}}/b4LnaHDrainVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_drain_v </Label>	
						<Value> {{spf_controller}}/b4LnaVDrainVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_gate_h </Label>	
						<Value> {{spf_controller}}/b4LnaHGateVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_gate_v </Label>	
						<Value> {{spf_controller}}/b4LnaVGateVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
					<FormulaVar>
						<Label> I_drain_h </Label>	
						<Value> {{spf_controller}}/b4LnaHDrainCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_drain_v </Label>	
						<Value> {{spf_controller}}/b4LnaVDrainCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> G_h </Label>	
						<Value> {{spf_controller}}/b4LnaHMeanGain </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> G_v </Label>	
						<Value> {{spf_controller}}/b4LnaVMeanGain </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}


		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b5_in_config | bool) %}
		<Attribute name = "spfB5LnaOutOfRange" alias="spfB5LnaOutOfRange">
			<Description> SPF Band 5 LNA out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var VDrainHStatus:= 'UNKNOWN';
					var VDrainVStatus:= 'UNKNOWN';
					var VGateHStatus:= 'UNKNOWN';
					var VGateVStatus:= 'UNKNOWN';
					var IDrainHStatus:= 'UNKNOWN';
					var IDrainVStatus:= 'UNKNOWN';
					var GainHStatus:= 'UNKNOWN';
					var GainVStatus:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* LNA V drain H channel status */
					if(V_drain_h &lt; {{spf_lna_drain_volt_min_alarm}} or V_drain_h &gt; {{spf_lna_drain_volt_max_alarm}}) VDrainHStatus:= 'ALARM';
					else if(V_drain_h &lt; {{spf_lna_drain_volt_min_warn}} or V_drain_h &gt; {{spf_lna_drain_volt_max_warn}}) VDrainHStatus:= 'WARN';
					else VDrainHStatus:= 'NORMAL';

					/* LNA H drain V channel status */
					if(V_drain_v &lt; {{spf_lna_drain_volt_min_alarm}} or V_drain_v &gt; {{spf_lna_drain_volt_max_alarm}}) VDrainVStatus:= 'ALARM';
					else if(V_drain_v &lt; {{spf_lna_drain_volt_min_warn}} or V_drain_v &gt; {{spf_lna_drain_volt_max_warn}}) VDrainVStatus:= 'WARN';
					else VDrainVStatus:= 'NORMAL';

					/* LNA V gate H channel status */
					if(V_gate_h &lt; {{spf_lna_gate_volt_min_alarm}} or V_gate_h &gt; {{spf_lna_gate_volt_max_alarm}}) VGateHStatus:= 'ALARM';
					else if(V_gate_h &lt; {{spf_lna_gate_volt_min_warn}} or V_gate_h &gt; {{spf_lna_gate_volt_max_warn}}) VGateHStatus:= 'WARN';
					else VGateHStatus:= 'NORMAL';

					/* LNA V gate V channel status */
					if(V_gate_v &lt; {{spf_lna_gate_volt_min_alarm}} or V_gate_v &gt; {{spf_lna_gate_volt_max_alarm}}) VGateVStatus:= 'ALARM';
					else if(V_gate_v &lt; {{spf_lna_gate_volt_min_warn}} or V_gate_v &gt; {{spf_lna_gate_volt_max_warn}}) VGateVStatus:= 'WARN';
					else VGateVStatus:= 'NORMAL';

					/* LNA I drain H channel status */
					if(I_drain_h &lt; {{spf_lna_drain_curr_min_alarm}} or I_drain_h &gt; {{spf_lna_drain_curr_max_alarm}}) IDrainHStatus:= 'ALARM';
					else if(I_drain_h &lt; {{spf_lna_drain_curr_min_warn}} or I_drain_h &gt; {{spf_lna_drain_curr_max_warn}}) IDrainHStatus:= 'WARN';
					else IDrainHStatus:= 'NORMAL';

					/* LNA I drain V channel status */
					if(I_drain_v &lt; {{spf_lna_drain_curr_min_alarm}} or I_drain_v &gt; {{spf_lna_drain_curr_max_alarm}}) IDrainVStatus:= 'ALARM';
					else if(I_drain_v &lt; {{spf_lna_drain_curr_min_warn}} or I_drain_v &gt; {{spf_lna_drain_curr_max_warn}}) IDrainVStatus:= 'WARN';
					else IDrainVStatus:= 'NORMAL';

					/* LNA Gain avg H channel status */
					if(G_h &lt; {{spf_lna_mean_gain_min_alarm}} or G_h &gt; {{spf_lna_mean_gain_max_alarm}}) GainHStatus:= 'ALARM';
					else if(G_h &lt; {{spf_lna_mean_gain_min_warn}} or G_h &gt; {{spf_lna_mean_gain_max_warn}}) GainHStatus:= 'WARN';
					else GainHStatus:= 'NORMAL';

					/* LNA Gain avg V channel status */
					if(G_v &lt; {{spf_lna_mean_gain_min_alarm}} or G_v &gt; {{spf_lna_mean_gain_max_alarm}}) GainVStatus:= 'ALARM';
					else if(G_v &lt; {{spf_lna_mean_gain_min_warn}} or G_v &gt; {{spf_lna_mean_gain_max_warn}}) GainVStatus:= 'WARN';
					else GainVStatus:= 'NORMAL';
				
					/* Global alarm status */
					if( VDrainHStatus=='ALARM' or VDrainVStatus=='ALARM' or VGateHStatus=='ALARM' or VGateVStatus=='ALARM' or IDrainHStatus=='ALARM' or IDrainVStatus=='ALARM' or GainHStatus=='ALARM' or GainVStatus=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( VDrainHStatus=='WARN' or VDrainVStatus=='WARN' or VGateHStatus=='WARN' or VGateVStatus=='WARN' or IDrainHStatus=='WARN' or IDrainVStatus=='WARN' or GainHStatus=='WARN' or GainVStatus=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( VDrainHStatus=='NORMAL' and VDrainVStatus=='NORMAL' and VGateHStatus=='NORMAL' and VGateVStatus=='NORMAL' and IDrainHStatus=='NORMAL' and IDrainVStatus=='NORMAL' and GainHStatus=='NORMAL' and GainVStatus=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b5ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_drain_h </Label>	
						<Value> {{spf_controller}}/b5LnaHDrainVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_drain_v </Label>	
						<Value> {{spf_controller}}/b5LnaVDrainVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_gate_h </Label>	
						<Value> {{spf_controller}}/b5LnaHGateVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_gate_v </Label>	
						<Value> {{spf_controller}}/b5LnaVGateVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
					<FormulaVar>
						<Label> I_drain_h </Label>	
						<Value> {{spf_controller}}/b5LnaHDrainCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_drain_v </Label>	
						<Value> {{spf_controller}}/b5LnaVDrainCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
					<FormulaVar>
						<Label> G_h </Label>	
						<Value> {{spf_controller}}/b5LnaHMeanGain </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> G_v </Label>	
						<Value> {{spf_controller}}/b5LnaVMeanGain </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}
		


		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b1_in_config | bool and spf_enable_b2_in_config | bool and spf_enable_b3_in_config | bool and spf_enable_b4_in_config | bool and spf_enable_b5_in_config | bool) %}
		<Attribute name = "spfLnaOutOfRange" alias="spfLnaOutOfRange">
			<Description> SPF LNA out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Global alarm status */
					if( lna_b1=='ALARM' or lna_b2=='ALARM' or lna_b3=='ALARM' or lna_b4=='ALARM' or lna_b5=='ALARM' )
					{
						res:= 'ALARM';
						return [0];
					};
					if( lna_b1=='WARN' or lna_b2=='WARN' or lna_b3=='WARN' or lna_b4=='WARN' or lna_b5=='WARN' )
					{
						res:= 'WARN';
						return [0];
					};
	 				if( lna_b1=='NORMAL' and lna_b2=='NORMAL' and lna_b3=='NORMAL' and lna_b4=='NORMAL' and lna_b5=='NORMAL' )
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> lna_b1 </Label>	
						<Value> spfB1LnaOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> lna_b2 </Label>	
						<Value> spfB2LnaOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> lna_b3 </Label>	
						<Value> spfB3LnaOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> lna_b4 </Label>	
						<Value> spfB4LnaOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> lna_b5 </Label>	
						<Value> spfB5LnaOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b1_in_config | bool) %}
		<Attribute name = "spfB1Amp2OutOfRange" alias="spfB1Amp2OutOfRange">
			<Description> SPF B1 Amp2 out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var IAmpHStatus:= 'UNKNOWN';
					var IAmpVStatus:= 'UNKNOWN';
					var VAmpHStatus:= 'UNKNOWN';
					var VAmpVStatus:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Amp2 Current H channel status */
					if(I_amp2_h &lt; {{spf_amp2_curr_min_alarm}} or I_amp2_h &gt; {{spf_amp2_curr_max_alarm}}) IAmpHStatus:= 'ALARM';
					else if(I_amp2_h &lt; {{spf_amp2_curr_min_warn}} or I_amp2_h &gt; {{spf_amp2_curr_max_warn}}) IAmpHStatus:= 'WARN';
					else IAmpHStatus:= 'NORMAL';

					/* Amp2 Current V channel status */
					if(I_amp2_v &lt; {{spf_amp2_curr_min_alarm}} or I_amp2_v &gt; {{spf_amp2_curr_max_alarm}}) IAmpVStatus:= 'ALARM';
					else if(I_amp2_v &lt; {{spf_amp2_curr_min_warn}} or I_amp2_v &gt; {{spf_amp2_curr_max_warn}}) IAmpVStatus:= 'WARN';
					else IAmpVStatus:= 'NORMAL';

					/* Amp2 Voltage H channel status */
					if(V_amp2_h &lt; {{spf_amp2_volt_min_alarm}} or V_amp2_h &gt; {{spf_amp2_volt_max_alarm}}) VAmpHStatus:= 'ALARM';
					else if(V_amp2_h &lt; {{spf_amp2_volt_min_warn}} or V_amp2_h &gt; {{spf_amp2_volt_max_warn}}) VAmpHStatus:= 'WARN';
					else VAmpHStatus:= 'NORMAL';

					/* Amp2 Voltage V channel status */
					if(V_amp2_v &lt; {{spf_amp2_volt_min_alarm}} or V_amp2_v &gt; {{spf_amp2_volt_max_alarm}}) VAmpVStatus:= 'ALARM';
					else if(V_amp2_v &lt; {{spf_amp2_volt_min_warn}} or V_amp2_v &gt; {{spf_amp2_volt_max_warn}}) VAmpVStatus:= 'WARN';
					else VAmpVStatus:= 'NORMAL';					

					/* Global alarm status */
					if( IAmpHStatus=='ALARM' or IAmpVStatus=='ALARM' or VAmpHStatus=='ALARM' or VAmpVStatus=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( IAmpHStatus=='WARN' or IAmpVStatus=='WARN' or VAmpHStatus=='WARN' or VAmpVStatus=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( IAmpHStatus=='NORMAL' and IAmpVStatus=='NORMAL' and VAmpHStatus=='NORMAL' and VAmpVStatus=='NORMAL' )
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b1ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_amp2_h </Label>	
						<Value> {{spf_controller}}/b1Amp2HCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_amp2_v </Label>	
						<Value> {{spf_controller}}/b1Amp2VCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>

					<FormulaVar>
						<Label> V_amp2_h </Label>	
						<Value> {{spf_controller}}/b1Amp2HVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_amp2_v </Label>	
						<Value> {{spf_controller}}/b1Amp2VVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}


		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b2_in_config | bool) %}
		<Attribute name = "spfB2Amp2OutOfRange" alias="spfB2Amp2OutOfRange">
			<Description> SPF B2 Amp2 out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var IAmpHStatus:= 'UNKNOWN';
					var IAmpVStatus:= 'UNKNOWN';
					var VAmpHStatus:= 'UNKNOWN';
					var VAmpVStatus:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Amp2 Current H channel status */
					if(I_amp2_h &lt; {{spf_amp2_curr_min_alarm}} or I_amp2_h &gt; {{spf_amp2_curr_max_alarm}}) IAmpHStatus:= 'ALARM';
					else if(I_amp2_h &lt; {{spf_amp2_curr_min_warn}} or I_amp2_h &gt; {{spf_amp2_curr_max_warn}}) IAmpHStatus:= 'WARN';
					else IAmpHStatus:= 'NORMAL';

					/* Amp2 Current V channel status */
					if(I_amp2_v &lt; {{spf_amp2_curr_min_alarm}} or I_amp2_v &gt; {{spf_amp2_curr_max_alarm}}) IAmpVStatus:= 'ALARM';
					else if(I_amp2_v &lt; {{spf_amp2_curr_min_warn}} or I_amp2_v &gt; {{spf_amp2_curr_max_warn}}) IAmpVStatus:= 'WARN';
					else IAmpVStatus:= 'NORMAL';

					/* Amp2 Voltage H channel status */
					if(V_amp2_h &lt; {{spf_amp2_volt_min_alarm}} or V_amp2_h &gt; {{spf_amp2_volt_max_alarm}}) VAmpHStatus:= 'ALARM';
					else if(V_amp2_h &lt; {{spf_amp2_volt_min_warn}} or V_amp2_h &gt; {{spf_amp2_volt_max_warn}}) VAmpHStatus:= 'WARN';
					else VAmpHStatus:= 'NORMAL';

					/* Amp2 Voltage V channel status */
					if(V_amp2_v &lt; {{spf_amp2_volt_min_alarm}} or V_amp2_v &gt; {{spf_amp2_volt_max_alarm}}) VAmpVStatus:= 'ALARM';
					else if(V_amp2_v &lt; {{spf_amp2_volt_min_warn}} or V_amp2_v &gt; {{spf_amp2_volt_max_warn}}) VAmpVStatus:= 'WARN';
					else VAmpVStatus:= 'NORMAL';					

					/* Global alarm status */
					if( IAmpHStatus=='ALARM' or IAmpVStatus=='ALARM' or VAmpHStatus=='ALARM' or VAmpVStatus=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( IAmpHStatus=='WARN' or IAmpVStatus=='WARN' or VAmpHStatus=='WARN' or VAmpVStatus=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( IAmpHStatus=='NORMAL' and IAmpVStatus=='NORMAL' and VAmpHStatus=='NORMAL' and VAmpVStatus=='NORMAL' )
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b2ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_amp2_h </Label>	
						<Value> {{spf_controller}}/b2Amp2HCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_amp2_v </Label>	
						<Value> {{spf_controller}}/b2Amp2VCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_amp2_h </Label>	
						<Value> {{spf_controller}}/b2Amp2HVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_amp2_v </Label>	
						<Value> {{spf_controller}}/b2Amp2VVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>
				
				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b3_in_config | bool) %}
		<Attribute name = "spfB3Amp2OutOfRange" alias="spfB3Amp2OutOfRange">
			<Description> SPF B3 Amp2 out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var IAmpHStatus:= 'UNKNOWN';
					var IAmpVStatus:= 'UNKNOWN';
					var VAmpHStatus:= 'UNKNOWN';
					var VAmpVStatus:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Amp2 Current H channel status */
					if(I_amp2_h &lt; {{spf_amp2_curr_min_alarm}} or I_amp2_h &gt; {{spf_amp2_curr_max_alarm}}) IAmpHStatus:= 'ALARM';
					else if(I_amp2_h &lt; {{spf_amp2_curr_min_warn}} or I_amp2_h &gt; {{spf_amp2_curr_max_warn}}) IAmpHStatus:= 'WARN';
					else IAmpHStatus:= 'NORMAL';

					/* Amp2 Current V channel status */
					if(I_amp2_v &lt; {{spf_amp2_curr_min_alarm}} or I_amp2_v &gt; {{spf_amp2_curr_max_alarm}}) IAmpVStatus:= 'ALARM';
					else if(I_amp2_v &lt; {{spf_amp2_curr_min_warn}} or I_amp2_v &gt; {{spf_amp2_curr_max_warn}}) IAmpVStatus:= 'WARN';
					else IAmpVStatus:= 'NORMAL';

					/* Amp2 Voltage H channel status */
					if(V_amp2_h &lt; {{spf_amp2_volt_min_alarm}} or V_amp2_h &gt; {{spf_amp2_volt_max_alarm}}) VAmpHStatus:= 'ALARM';
					else if(V_amp2_h &lt; {{spf_amp2_volt_min_warn}} or V_amp2_h &gt; {{spf_amp2_volt_max_warn}}) VAmpHStatus:= 'WARN';
					else VAmpHStatus:= 'NORMAL';

					/* Amp2 Voltage V channel status */
					if(V_amp2_v &lt; {{spf_amp2_volt_min_alarm}} or V_amp2_v &gt; {{spf_amp2_volt_max_alarm}}) VAmpVStatus:= 'ALARM';
					else if(V_amp2_v &lt; {{spf_amp2_volt_min_warn}} or V_amp2_v &gt; {{spf_amp2_volt_max_warn}}) VAmpVStatus:= 'WARN';
					else VAmpVStatus:= 'NORMAL';					

					/* Global alarm status */
					if( IAmpHStatus=='ALARM' or IAmpVStatus=='ALARM' or VAmpHStatus=='ALARM' or VAmpVStatus=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( IAmpHStatus=='WARN' or IAmpVStatus=='WARN' or VAmpHStatus=='WARN' or VAmpVStatus=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( IAmpHStatus=='NORMAL' and IAmpVStatus=='NORMAL' and VAmpHStatus=='NORMAL' and VAmpVStatus=='NORMAL' )
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>		
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b3ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_amp2_h </Label>	
						<Value> {{spf_controller}}/b3Amp2HCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_amp2_v </Label>	
						<Value> {{spf_controller}}/b3Amp2VCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_amp2_h </Label>	
						<Value> {{spf_controller}}/b3Amp2HVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_amp2_v </Label>	
						<Value> {{spf_controller}}/b3Amp2VVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>
				

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}


		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b4_in_config | bool) %}
		<Attribute name = "spfB4Amp2OutOfRange" alias="spfB4Amp2OutOfRange">
			<Description> SPF B4 Amp2 out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var IAmpHStatus:= 'UNKNOWN';
					var IAmpVStatus:= 'UNKNOWN';
					var VAmpHStatus:= 'UNKNOWN';
					var VAmpVStatus:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Amp2 Current H channel status */
					if(I_amp2_h &lt; {{spf_amp2_curr_min_alarm}} or I_amp2_h &gt; {{spf_amp2_curr_max_alarm}}) IAmpHStatus:= 'ALARM';
					else if(I_amp2_h &lt; {{spf_amp2_curr_min_warn}} or I_amp2_h &gt; {{spf_amp2_curr_max_warn}}) IAmpHStatus:= 'WARN';
					else IAmpHStatus:= 'NORMAL';

					/* Amp2 Current V channel status */
					if(I_amp2_v &lt; {{spf_amp2_curr_min_alarm}} or I_amp2_v &gt; {{spf_amp2_curr_max_alarm}}) IAmpVStatus:= 'ALARM';
					else if(I_amp2_v &lt; {{spf_amp2_curr_min_warn}} or I_amp2_v &gt; {{spf_amp2_curr_max_warn}}) IAmpVStatus:= 'WARN';
					else IAmpVStatus:= 'NORMAL';

					/* Amp2 Voltage H channel status */
					if(V_amp2_h &lt; {{spf_amp2_volt_min_alarm}} or V_amp2_h &gt; {{spf_amp2_volt_max_alarm}}) VAmpHStatus:= 'ALARM';
					else if(V_amp2_h &lt; {{spf_amp2_volt_min_warn}} or V_amp2_h &gt; {{spf_amp2_volt_max_warn}}) VAmpHStatus:= 'WARN';
					else VAmpHStatus:= 'NORMAL';

					/* Amp2 Voltage V channel status */
					if(V_amp2_v &lt; {{spf_amp2_volt_min_alarm}} or V_amp2_v &gt; {{spf_amp2_volt_max_alarm}}) VAmpVStatus:= 'ALARM';
					else if(V_amp2_v &lt; {{spf_amp2_volt_min_warn}} or V_amp2_v &gt; {{spf_amp2_volt_max_warn}}) VAmpVStatus:= 'WARN';
					else VAmpVStatus:= 'NORMAL';					

					/* Global alarm status */
					if( IAmpHStatus=='ALARM' or IAmpVStatus=='ALARM' or VAmpHStatus=='ALARM' or VAmpVStatus=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( IAmpHStatus=='WARN' or IAmpVStatus=='WARN' or VAmpHStatus=='WARN' or VAmpVStatus=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( IAmpHStatus=='NORMAL' and IAmpVStatus=='NORMAL' and VAmpHStatus=='NORMAL' and VAmpVStatus=='NORMAL' )
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b4ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_amp2_h </Label>	
						<Value> {{spf_controller}}/b4Amp2HCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_amp2_v </Label>	
						<Value> {{spf_controller}}/b4Amp2VCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_amp2_h </Label>	
						<Value> {{spf_controller}}/b4Amp2HVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_amp2_v </Label>	
						<Value> {{spf_controller}}/b4Amp2VVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}


		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b5_in_config | bool) %}
		<Attribute name = "spfB5Amp2OutOfRange" alias="spfB5Amp2OutOfRange">
			<Description> SPF B5 Amp2 out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var IAmpHStatus:= 'UNKNOWN';
					var IAmpVStatus:= 'UNKNOWN';
					var VAmpHStatus:= 'UNKNOWN';
					var VAmpVStatus:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Amp2 Current H channel status */
					if(I_amp2_h &lt; {{spf_amp2_curr_min_alarm}} or I_amp2_h &gt; {{spf_amp2_curr_max_alarm}}) IAmpHStatus:= 'ALARM';
					else if(I_amp2_h &lt; {{spf_amp2_curr_min_warn}} or I_amp2_h &gt; {{spf_amp2_curr_max_warn}}) IAmpHStatus:= 'WARN';
					else IAmpHStatus:= 'NORMAL';

					/* Amp2 Current V channel status */
					if(I_amp2_v &lt; {{spf_amp2_curr_min_alarm}} or I_amp2_v &gt; {{spf_amp2_curr_max_alarm}}) IAmpVStatus:= 'ALARM';
					else if(I_amp2_v &lt; {{spf_amp2_curr_min_warn}} or I_amp2_v &gt; {{spf_amp2_curr_max_warn}}) IAmpVStatus:= 'WARN';
					else IAmpVStatus:= 'NORMAL';

					/* Amp2 Voltage H channel status */
					if(V_amp2_h &lt; {{spf_amp2_volt_min_alarm}} or V_amp2_h &gt; {{spf_amp2_volt_max_alarm}}) VAmpHStatus:= 'ALARM';
					else if(V_amp2_h &lt; {{spf_amp2_volt_min_warn}} or V_amp2_h &gt; {{spf_amp2_volt_max_warn}}) VAmpHStatus:= 'WARN';
					else VAmpHStatus:= 'NORMAL';

					/* Amp2 Voltage V channel status */
					if(V_amp2_v &lt; {{spf_amp2_volt_min_alarm}} or V_amp2_v &gt; {{spf_amp2_volt_max_alarm}}) VAmpVStatus:= 'ALARM';
					else if(V_amp2_v &lt; {{spf_amp2_volt_min_warn}} or V_amp2_v &gt; {{spf_amp2_volt_max_warn}}) VAmpVStatus:= 'WARN';
					else VAmpVStatus:= 'NORMAL';					

					/* Global alarm status */
					if( IAmpHStatus=='ALARM' or IAmpVStatus=='ALARM' or VAmpHStatus=='ALARM' or VAmpVStatus=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( IAmpHStatus=='WARN' or IAmpVStatus=='WARN' or VAmpHStatus=='WARN' or VAmpVStatus=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( IAmpHStatus=='NORMAL' and IAmpVStatus=='NORMAL' and VAmpHStatus=='NORMAL' and VAmpVStatus=='NORMAL' )
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b5ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_amp2_h </Label>	
						<Value> {{spf_controller}}/b5Amp2HCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_amp2_v </Label>	
						<Value> {{spf_controller}}/b5Amp2VCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_amp2_h </Label>	
						<Value> {{spf_controller}}/b5Amp2HVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> V_amp2_v </Label>	
						<Value> {{spf_controller}}/b5Amp2VVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>
				

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b1_in_config | bool and spf_enable_b2_in_config | bool and spf_enable_b3_in_config | bool and spf_enable_b4_in_config | bool and spf_enable_b5_in_config | bool) %}
		<Attribute name = "spfAmp2OutOfRange" alias="spfAmp2OutOfRange">
			<Description> SPF LNA out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Global alarm status */
					if( amp2_b1=='ALARM' or amp2_b2=='ALARM' or amp2_b3=='ALARM' or amp2_b4=='ALARM' or amp2_b5=='ALARM' )
					{
						res:= 'ALARM';
						return [0];
					};
					if( amp2_b1=='WARN' or amp2_b2=='WARN' or amp2_b3=='WARN' or amp2_b4=='WARN' or amp2_b5=='WARN' )
					{
						res:= 'WARN';
						return [0];
					};
	 				if( amp2_b1=='NORMAL' and amp2_b2=='NORMAL' and amp2_b3=='NORMAL' and amp2_b4=='NORMAL' and amp2_b5=='NORMAL' )
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> amp2_b1 </Label>	
						<Value> spfB1Amp2OutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> amp2_b2 </Label>	
						<Value> spfB2Amp2OutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> amp2_b3 </Label>	
						<Value> spfB3Amp2OutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> amp2_b4 </Label>	
						<Value> spfB4Amp2OutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> amp2_b5 </Label>	
						<Value> spfB5Amp2OutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b1_in_config | bool) %}
		<Attribute name = "spfB1CalSourceOutOfRange" alias="spfB1CalSourceOutOfRange">
			<Description> SPF B1 calibration source out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var IStatus:= 'UNKNOWN';
					var VStatus:= 'UNKNOWN';
					var TStatus:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Cal Source Current status */
					if(curr &lt; {{spf_cal_source_curr_min_alarm}} or curr &gt; {{spf_cal_source_curr_max_alarm}}) IStatus:= 'ALARM';
					else if(curr &lt; {{spf_cal_source_curr_min_warn}} or curr &gt; {{spf_cal_source_curr_max_warn}}) IStatus:= 'WARN';
					else IStatus:= 'NORMAL';

					/* Cal Source Voltage status */
					if(volt &lt; {{spf_cal_source_volt_min_alarm}} or volt &gt; {{spf_cal_source_volt_max_alarm}}) VStatus:= 'ALARM';
					else if(volt &lt; {{spf_cal_source_volt_min_warn}} or volt &gt; {{spf_cal_source_volt_max_warn}}) VStatus:= 'WARN';
					else VStatus:= 'NORMAL';

					/* Cal Source Temperature status */
					if(temp &lt; {{spf_cal_source_temp_min_alarm}} or temp &gt; {{spf_cal_source_temp_max_alarm}}) TStatus:= 'ALARM';
					else if(temp &lt; {{spf_cal_source_temp_min_warn}} or temp &gt; {{spf_cal_source_temp_max_warn}}) TStatus:= 'WARN';
					else TStatus:= 'NORMAL';

					/* Global alarm status */
					if( IStatus=='ALARM' or VStatus=='ALARM' or TStatus=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( IStatus=='WARN' or VStatus=='WARN' or TStatus=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( IStatus=='NORMAL' and VStatus=='NORMAL' and TStatus=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b1ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> curr </Label>	
						<Value> {{spf_controller}}/b1CalSourceCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> volt </Label>	
						<Value> {{spf_controller}}/b1CalSourceVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp </Label>	
						<Value> {{spf_controller}}/b1CalSourceTemp </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}


		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b2_in_config | bool) %}
		<Attribute name = "spfB2CalSourceOutOfRange" alias="spfB2CalSourceOutOfRange">
			<Description> SPF B2 calibration source out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var IStatus:= 'UNKNOWN';
					var VStatus:= 'UNKNOWN';
					var TStatus:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Cal Source Current status */
					if(curr &lt; {{spf_cal_source_curr_min_alarm}} or curr &gt; {{spf_cal_source_curr_max_alarm}}) IStatus:= 'ALARM';
					else if(curr &lt; {{spf_cal_source_curr_min_warn}} or curr &gt; {{spf_cal_source_curr_max_warn}}) IStatus:= 'WARN';
					else IStatus:= 'NORMAL';

					/* Cal Source Voltage status */
					if(volt &lt; {{spf_cal_source_volt_min_alarm}} or volt &gt; {{spf_cal_source_volt_max_alarm}}) VStatus:= 'ALARM';
					else if(volt &lt; {{spf_cal_source_volt_min_warn}} or volt &gt; {{spf_cal_source_volt_max_warn}}) VStatus:= 'WARN';
					else VStatus:= 'NORMAL';

					/* Cal Source Temperature status */
					if(temp &lt; {{spf_cal_source_temp_min_alarm}} or temp &gt; {{spf_cal_source_temp_max_alarm}}) TStatus:= 'ALARM';
					else if(temp &lt; {{spf_cal_source_temp_min_warn}} or temp &gt; {{spf_cal_source_temp_max_warn}}) TStatus:= 'WARN';
					else TStatus:= 'NORMAL';

					/* Global alarm status */
					if( IStatus=='ALARM' or VStatus=='ALARM' or TStatus=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( IStatus=='WARN' or VStatus=='WARN' or TStatus=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( IStatus=='NORMAL' and VStatus=='NORMAL' and TStatus=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b2ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> curr </Label>	
						<Value> {{spf_controller}}/b2CalSourceCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> volt </Label>	
						<Value> {{spf_controller}}/b2CalSourceVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp </Label>	
						<Value> {{spf_controller}}/b2CalSourceTemp </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b3_in_config | bool) %}
		<Attribute name = "spfB3CalSourceOutOfRange" alias="spfB3CalSourceOutOfRange">
			<Description> SPF B3 calibration source out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var IStatus:= 'UNKNOWN';
					var VStatus:= 'UNKNOWN';
					var TStatus:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Cal Source Current status */
					if(curr &lt; {{spf_cal_source_curr_min_alarm}} or curr &gt; {{spf_cal_source_curr_max_alarm}}) IStatus:= 'ALARM';
					else if(curr &lt; {{spf_cal_source_curr_min_warn}} or curr &gt; {{spf_cal_source_curr_max_warn}}) IStatus:= 'WARN';
					else IStatus:= 'NORMAL';

					/* Cal Source Voltage status */
					if(volt &lt; {{spf_cal_source_volt_min_alarm}} or volt &gt; {{spf_cal_source_volt_max_alarm}}) VStatus:= 'ALARM';
					else if(volt &lt; {{spf_cal_source_volt_min_warn}} or volt &gt; {{spf_cal_source_volt_max_warn}}) VStatus:= 'WARN';
					else VStatus:= 'NORMAL';

					/* Cal Source Temperature status */
					if(temp &lt; {{spf_cal_source_temp_min_alarm}} or temp &gt; {{spf_cal_source_temp_max_alarm}}) TStatus:= 'ALARM';
					else if(temp &lt; {{spf_cal_source_temp_min_warn}} or temp &gt; {{spf_cal_source_temp_max_warn}}) TStatus:= 'WARN';
					else TStatus:= 'NORMAL';

					/* Global alarm status */
					if( IStatus=='ALARM' or VStatus=='ALARM' or TStatus=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( IStatus=='WARN' or VStatus=='WARN' or TStatus=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( IStatus=='NORMAL' and VStatus=='NORMAL' and TStatus=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b3ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> curr </Label>	
						<Value> {{spf_controller}}/b3CalSourceCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> volt </Label>	
						<Value> {{spf_controller}}/b3CalSourceVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp </Label>	
						<Value> {{spf_controller}}/b3CalSourceTemp </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}


		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b4_in_config | bool) %}
		<Attribute name = "spfB4CalSourceOutOfRange" alias="spfB4CalSourceOutOfRange">
			<Description> SPF B4 calibration source out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var IStatus:= 'UNKNOWN';
					var VStatus:= 'UNKNOWN';
					var TStatus:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Cal Source Current status */
					if(curr &lt; {{spf_cal_source_curr_min_alarm}} or curr &gt; {{spf_cal_source_curr_max_alarm}}) IStatus:= 'ALARM';
					else if(curr &lt; {{spf_cal_source_curr_min_warn}} or curr &gt; {{spf_cal_source_curr_max_warn}}) IStatus:= 'WARN';
					else IStatus:= 'NORMAL';

					/* Cal Source Voltage status */
					if(volt &lt; {{spf_cal_source_volt_min_alarm}} or volt &gt; {{spf_cal_source_volt_max_alarm}}) VStatus:= 'ALARM';
					else if(volt &lt; {{spf_cal_source_volt_min_warn}} or volt &gt; {{spf_cal_source_volt_max_warn}}) VStatus:= 'WARN';
					else VStatus:= 'NORMAL';

					/* Cal Source Temperature status */
					if(temp &lt; {{spf_cal_source_temp_min_alarm}} or temp &gt; {{spf_cal_source_temp_max_alarm}}) TStatus:= 'ALARM';
					else if(temp &lt; {{spf_cal_source_temp_min_warn}} or temp &gt; {{spf_cal_source_temp_max_warn}}) TStatus:= 'WARN';
					else TStatus:= 'NORMAL';

					/* Global alarm status */
					if( IStatus=='ALARM' or VStatus=='ALARM' or TStatus=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( IStatus=='WARN' or VStatus=='WARN' or TStatus=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( IStatus=='NORMAL' and VStatus=='NORMAL' and TStatus=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b4ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> curr </Label>	
						<Value> {{spf_controller}}/b4CalSourceCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> volt </Label>	
						<Value> {{spf_controller}}/b4CalSourceVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp </Label>	
						<Value> {{spf_controller}}/b4CalSourceTemp </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}


		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b5_in_config | bool) %}
		<Attribute name = "spfB5CalSourceOutOfRange" alias="spfB5CalSourceOutOfRange">
			<Description> SPF B5 calibration source out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var IStatus:= 'UNKNOWN';
					var VStatus:= 'UNKNOWN';
					var TStatus:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Cal Source Current status */
					if(curr &lt; {{spf_cal_source_curr_min_alarm}} or curr &gt; {{spf_cal_source_curr_max_alarm}}) IStatus:= 'ALARM';
					else if(curr &lt; {{spf_cal_source_curr_min_warn}} or curr &gt; {{spf_cal_source_curr_max_warn}}) IStatus:= 'WARN';
					else IStatus:= 'NORMAL';

					/* Cal Source Voltage status */
					if(volt &lt; {{spf_cal_source_volt_min_alarm}} or volt &gt; {{spf_cal_source_volt_max_alarm}}) VStatus:= 'ALARM';
					else if(volt &lt; {{spf_cal_source_volt_min_warn}} or volt &gt; {{spf_cal_source_volt_max_warn}}) VStatus:= 'WARN';
					else VStatus:= 'NORMAL';

					/* Cal Source Temperature status */
					if(temp &lt; {{spf_cal_source_temp_min_alarm}} or temp &gt; {{spf_cal_source_temp_max_alarm}}) TStatus:= 'ALARM';
					else if(temp &lt; {{spf_cal_source_temp_min_warn}} or temp &gt; {{spf_cal_source_temp_max_warn}}) TStatus:= 'WARN';
					else TStatus:= 'NORMAL';

					/* Global alarm status */
					if( IStatus=='ALARM' or VStatus=='ALARM' or TStatus=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( IStatus=='WARN' or VStatus=='WARN' or TStatus=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( IStatus=='NORMAL' and VStatus=='NORMAL' and TStatus=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b5ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> curr </Label>	
						<Value> {{spf_controller}}/b5CalSourceCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> volt </Label>	
						<Value> {{spf_controller}}/b5CalSourceVoltage </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp </Label>	
						<Value> {{spf_controller}}/b5CalSourceTemp </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}


		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b1_in_config | bool and spf_enable_b2_in_config | bool and spf_enable_b3_in_config | bool and spf_enable_b4_in_config | bool and spf_enable_b5_in_config | bool) %}
		<Attribute name = "spfCalSourceOutOfRange" alias="spfCalSourceOutOfRange">
			<Description> SPF calibration sources out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Global alarm status */
					if( calsource_b1=='ALARM' or calsource_b2=='ALARM' or calsource_b3=='ALARM' or calsource_b4=='ALARM' or calsource_b5=='ALARM' )
					{
						res:= 'ALARM';
						return [0];
					};
					if( calsource_b1=='WARN' or calsource_b2=='WARN' or calsource_b3=='WARN' or calsource_b4=='WARN' or calsource_b5=='WARN' )
					{
						res:= 'WARN';
						return [0];
					};
	 				if( calsource_b1=='NORMAL' and calsource_b2=='NORMAL' and calsource_b3=='NORMAL' and calsource_b4=='NORMAL' and calsource_b5=='NORMAL' )
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> calsource_b1 </Label>	
						<Value> spfB1CalSourceOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> calsource_b2 </Label>	
						<Value> spfB2CalSourceOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> calsource_b3 </Label>	
						<Value> spfB3CalSourceOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> calsource_b4 </Label>	
						<Value> spfB4CalSourceOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> calsource_b5 </Label>	
						<Value> spfB5CalSourceOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}
		

		
		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b1_in_config | bool) %}
		<Attribute name = "spfB1RfePidOutOfRange" alias="spfB1RfePidOutOfRange">
			<Description> SPF B1 rfe Pid out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var I1Status:= 'UNKNOWN';
					var I2Status:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* RFE Pid 1 current status */
					if(I_rfe_1 &lt; {{spf_rfe1_pid_curr_min_alarm}} or I_rfe_1 &gt; {{spf_rfe1_pid_curr_max_alarm}}) I1Status:= 'ALARM';
					else if(I_rfe_1 &lt; {{spf_rfe1_pid_curr_min_warn}} or I_rfe_1 &gt; {{spf_rfe1_pid_curr_max_warn}}) I1Status:= 'WARN';
					else I1Status:= 'NORMAL';

					/* RFE Pid 2 current status */
					if(I_rfe_2 &lt; {{spf_rfe2_pid_curr_min_alarm}} or I_rfe_2 &gt; {{spf_rfe2_pid_curr_max_alarm}}) I2Status:= 'ALARM';
					else if(I_rfe_2 &lt; {{spf_rfe2_pid_curr_min_warn}} or I_rfe_2 &gt; {{spf_rfe2_pid_curr_max_warn}}) I2Status:= 'WARN';
					else I2Status:= 'NORMAL';

					/* Global alarm status */
					if( I1Status=='ALARM' or I2Status=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( I1Status=='WARN' or I2Status=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( I1Status=='NORMAL' and I2Status=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b1ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_rfe_1 </Label>	
						<Value> {{spf_controller}}/b1Rfe1PidCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_rfe_2 </Label>	
						<Value> {{spf_controller}}/b1Rfe2PidCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		
		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b2_in_config | bool) %}
		<Attribute name = "spfB2RfePidOutOfRange" alias="spfB2RfePidOutOfRange">
			<Description> SPF B2 rfe PID out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var I1Status:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* RFE Heater 1 current status */
					if(I_rfe_1 &lt; {{spf_rfe1_pid_curr_min_alarm}} or I_rfe_1 &gt; {{spf_rfe1_pid_curr_max_alarm}}) I1Status:= 'ALARM';
					else if(I_rfe_1 &lt; {{spf_rfe1_pid_curr_min_warn}} or I_rfe_1 &gt; {{spf_rfe1_pid_curr_max_warn}}) I1Status:= 'WARN';
					else I1Status:= 'NORMAL';

					/* Global alarm status */
					if( I1Status=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( I1Status=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( I1Status=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b2ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_rfe_1 </Label>	
						<Value> {{spf_controller}}/b2Rfe1PidCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b3_in_config | bool) %}
		<Attribute name = "spfB3RfePidOutOfRange" alias="spfB3RfePidOutOfRange">
			<Description> SPF B3 rfe PID out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var I1Status:= 'UNKNOWN';
					var I2Status:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* RFE Heater 1 current status */
					if(I_rfe_1 &lt; {{spf_rfe1_pid_curr_min_alarm}} or I_rfe_1 &gt; {{spf_rfe1_pid_curr_max_alarm}}) I1Status:= 'ALARM';
					else if(I_rfe_1 &lt; {{spf_rfe1_pid_curr_min_warn}} or I_rfe_1 &gt; {{spf_rfe1_pid_curr_max_warn}}) I1Status:= 'WARN';
					else I1Status:= 'NORMAL';

					/* RFE Heater 2 current status */
					if(I_rfe_2 &lt; {{spf_rfe2_pid_curr_min_alarm}} or I_rfe_2 &gt; {{spf_rfe2_pid_curr_max_alarm}}) I2Status:= 'ALARM';
					else if(I_rfe_2 &lt; {{spf_rfe2_pid_curr_min_warn}} or I_rfe_2 &gt; {{spf_rfe2_pid_curr_max_warn}}) I2Status:= 'WARN';
					else I2Status:= 'NORMAL';

					/* Global alarm status */
					if( I1Status=='ALARM' or I2Status=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( I1Status=='WARN' or I2Status=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( I1Status=='NORMAL' and I2Status=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b3ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_rfe_1 </Label>	
						<Value> {{spf_controller}}/b3Rfe1PidCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_rfe_2 </Label>	
						<Value> {{spf_controller}}/b3Rfe2PidCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b4_in_config | bool) %}
		<Attribute name = "spfB4RfePidOutOfRange" alias="spfB4RfePidOutOfRange">
			<Description> SPF B4 rfe PID out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var I1Status:= 'UNKNOWN';
					var I2Status:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* RFE Heater 1 current status */
					if(I_rfe_1 &lt; {{spf_rfe1_pid_curr_min_alarm}} or I_rfe_1 &gt; {{spf_rfe1_pid_curr_max_alarm}}) I1Status:= 'ALARM';
					else if(I_rfe_1 &lt; {{spf_rfe1_pid_curr_min_warn}} or I_rfe_1 &gt; {{spf_rfe1_pid_curr_max_warn}}) I1Status:= 'WARN';
					else I1Status:= 'NORMAL';

					/* RFE Heater 2 current status */
					if(I_rfe_2 &lt; {{spf_rfe2_pid_curr_min_alarm}} or I_rfe_2 &gt; {{spf_rfe2_pid_curr_max_alarm}}) I2Status:= 'ALARM';
					else if(I_rfe_2 &lt; {{spf_rfe2_pid_curr_min_warn}} or I_rfe_2 &gt; {{spf_rfe2_pid_curr_max_warn}}) I2Status:= 'WARN';
					else I2Status:= 'NORMAL';

					/* Global alarm status */
					if( I1Status=='ALARM' or I2Status=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( I1Status=='WARN' or I2Status=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( I1Status=='NORMAL' and I2Status=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b4ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_rfe_1 </Label>	
						<Value> {{spf_controller}}/b4Rfe1PidCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_rfe_2 </Label>	
						<Value> {{spf_controller}}/b4Rfe2PidCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b5_in_config | bool) %}
		<Attribute name = "spfB5RfePidOutOfRange" alias="spfB5RfePidOutOfRange">
			<Description> SPF B5 rfe PID out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var I1Status:= 'UNKNOWN';
					var I2Status:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* RFE Heater 1 current status */
					if(I_rfe_1 &lt; {{spf_rfe1_pid_curr_min_alarm}} or I_rfe_1 &gt; {{spf_rfe1_pid_curr_max_alarm}}) I1Status:= 'ALARM';
					else if(I_rfe_1 &lt; {{spf_rfe1_pid_curr_min_warn}} or I_rfe_1 &gt; {{spf_rfe1_pid_curr_max_warn}}) I1Status:= 'WARN';
					else I1Status:= 'NORMAL';

					/* RFE Heater 2 current status */
					if(I_rfe_2 &lt; {{spf_rfe2_pid_curr_min_alarm}} or I_rfe_2 &gt; {{spf_rfe2_pid_curr_max_alarm}}) I2Status:= 'ALARM';
					else if(I_rfe_2 &lt; {{spf_rfe2_pid_curr_min_warn}} or I_rfe_2 &gt; {{spf_rfe2_pid_curr_max_warn}}) I2Status:= 'WARN';
					else I2Status:= 'NORMAL';

					/* Global alarm status */
					if( I1Status=='ALARM' or I2Status=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( I1Status=='WARN' or I2Status=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( I1Status=='NORMAL' and I2Status=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b5ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_rfe_1 </Label>	
						<Value> {{spf_controller}}/b5Rfe1PidCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> I_rfe_2 </Label>	
						<Value> {{spf_controller}}/b5Rfe2PidCurrent </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or lmc_config_mode == 'spf' %}
		<Attribute name = "spfRfePidOutOfRange" alias="spfRfePidOutOfRange">
			<Description> SPF rfe PIDs out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Global alarm status */
					if( curr_b1=='ALARM' or curr_b2=='ALARM' or curr_b3=='ALARM' or curr_b4=='ALARM' or curr_b5=='ALARM' )
					{
						res:= 'ALARM';
						return [0];
					};
					if( curr_b1=='WARN' or curr_b2=='WARN' or curr_b3=='WARN' or curr_b4=='WARN' or curr_b5=='WARN' )
					{
						res:= 'WARN';
						return [0];
					};
	 				if( curr_b1=='NORMAL' and curr_b2=='NORMAL' and curr_b3=='NORMAL' and curr_b4=='NORMAL' and curr_b5=='NORMAL' )
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> curr_b1 </Label>	
						<Value> spfB1RfePidOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> curr_b2 </Label>	
						<Value> spfB2RfePidOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> curr_b3 </Label>	
						<Value> spfB3RfePidOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> curr_b4 </Label>	
						<Value> spfB4RfePidOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> curr_b5 </Label>	
						<Value> spfB5RfePidOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b1_in_config | bool) %}
		<Attribute name = "spfB1CryostatOutOfRange" alias="spfB1CryostatOutOfRange">
			<Description> SPF B1 cryostat out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var PStatus:= 'UNKNOWN';
					var TStatus:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Cryocooler press status */
					if(press &lt; {{spf_cryo_press_min_alarm}} or press &gt; {{spf_cryo_press_max_alarm}}) PStatus:= 'ALARM';
					else if(press &lt; {{spf_cryo_press_min_warn}} or press &gt; {{spf_cryo_press_max_warn}}) PStatus:= 'WARN';
					else PStatus:= 'NORMAL';

					/* Cryostat temp current status */
					if(temp &lt; {{spf_cryo_body_temp_min_alarm}} or temp &gt; {{spf_cryo_body_temp_max_alarm}}) TStatus:= 'ALARM';
					else if(temp &lt; {{spf_cryo_body_temp_min_warn}} or temp &gt; {{spf_cryo_body_temp_max_warn}}) TStatus:= 'WARN';
					else TStatus:= 'NORMAL';

					/* Global alarm status */
					if( PStatus=='ALARM' or TStatus=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( PStatus=='WARN' or TStatus=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( PStatus=='NORMAL' and TStatus=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b1ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> press </Label>	
						<Value> {{spf_controller}}/b1CryoPressure </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp </Label>	
						<Value> {{spf_controller}}/b1CryostatBodyTemp </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}


		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b2_in_config | bool) %}
		<Attribute name = "spfB2CryostatOutOfRange" alias="spfB2CryostatOutOfRange">
			<Description> SPF B2 cryostat out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var PStatus:= 'UNKNOWN';
					var TStatus:= 'UNKNOWN';

					if(ExpOnline==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Cryocooler press status */
					if(press &lt; {{spf_cryo_press_min_alarm}} or press &gt; {{spf_cryo_press_max_alarm}}) PStatus:= 'ALARM';
					else if(press &lt; {{spf_cryo_press_min_warn}} or press &gt; {{spf_cryo_press_max_warn}}) PStatus:= 'WARN';
					else PStatus:= 'NORMAL';

					/* Cryostat temp current status */
					if(temp &lt; {{spf_cryo_body_temp_min_alarm}} or temp &gt; {{spf_cryo_body_temp_max_alarm}}) TStatus:= 'ALARM';
					else if(temp &lt; {{spf_cryo_body_temp_min_warn}} or temp &gt; {{spf_cryo_body_temp_max_warn}}) TStatus:= 'WARN';
					else TStatus:= 'NORMAL';

					/* Global alarm status */
					if( PStatus=='ALARM' or TStatus=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( PStatus=='WARN' or TStatus=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( PStatus=='NORMAL' and TStatus=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b2ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> press </Label>	
						<Value> {{spf_controller}}/b2CryoPressure </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp </Label>	
						<Value> {{spf_controller}}/b2CryostatBodyTemp </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and (spf_enable_b3_in_config | bool or spf_enable_b4_in_config | bool or spf_enable_b5_in_config | bool) ) %}
		<Attribute name = "spfB345CryostatOutOfRange" alias="spfB345CryostatOutOfRange">
			<Description> SPF B345 cryostat out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var PStatus:= 'UNKNOWN';
					var TStatus:= 'UNKNOWN';

					if(ExpOnline3==0 and ExpOnline4==0 and ExpOnline5==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Cryocooler press status */
					if(press &lt; {{spf_cryo_press_min_alarm}} or press &gt; {{spf_cryo_press_max_alarm}}) PStatus:= 'ALARM';
					else if(press &lt; {{spf_cryo_press_min_warn}} or press &gt; {{spf_cryo_press_max_warn}}) PStatus:= 'WARN';
					else PStatus:= 'NORMAL';

					/* Cryostat temp current status */
					if(temp &lt; {{spf_cryo_body_temp_min_alarm}} or temp &gt; {{spf_cryo_body_temp_max_alarm}}) TStatus:= 'ALARM';
					else if(temp &lt; {{spf_cryo_body_temp_min_warn}} or temp &gt; {{spf_cryo_body_temp_max_warn}}) TStatus:= 'WARN';
					else TStatus:= 'NORMAL';

					/* Global alarm status */
					if( PStatus=='ALARM' or TStatus=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( PStatus=='WARN' or TStatus=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( PStatus=='NORMAL' and TStatus=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline3 </Label>	
						<Value> {{spf_controller}}/b3ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> ExpOnline4 </Label>	
						<Value> {{spf_controller}}/b4ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
					<FormulaVar>
						<Label> ExpOnline5 </Label>	
						<Value> {{spf_controller}}/b5ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> press </Label>	
						<Value> {{spf_controller}}/b345CryoPressure </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp </Label>	
						<Value> {{spf_controller}}/b345CryostatBodyTemp </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or lmc_config_mode == 'spf' %}
		<Attribute name = "spfCryostatOutOfRange" alias="spfCryostatOutOfRange">
			<Description> SPF cryostat out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Global alarm status */
					if( cryo_b1=='ALARM' or cryo_b2=='ALARM' or cryo_b345=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( cryo_b1=='WARN' or cryo_b2=='WARN' or cryo_b345=='WARN' )
					{
						res:= 'WARN';
						return [0];
					};
	 				if( cryo_b1=='NORMAL' and cryo_b2=='NORMAL' and cryo_b345=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> cryo_b1 </Label>	
						<Value> spfB1CryostatOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> cryo_b2 </Label>	
						<Value> spfB2CryostatOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> cryo_b345 </Label>	
						<Value> spfB345CryostatOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b1_in_config | bool) %}
		<Attribute name = "spfB1ManifoldOutOfRange" alias="spfB1ManifoldOutOfRange">
			<Description> SPF B1 manifold out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					if(ExpOnline)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Global alarm status */
					if( press &lt; {{spf_manifold_press_min_alarm}} or press &gt; {{spf_manifold_press_max_alarm}} )
					{
						res:= 'ALARM';
						return [0];
					};
					if( press &lt; {{spf_manifold_press_min_warn}} or press &gt; {{spf_manifold_press_max_warn}} )
					{
						res:= 'WARN';
						return [0];
					};
	 				
					res:= 'NORMAL';
					return [0];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b1ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> press </Label>	
						<Value> {{spf_controller}}/b1ManifoldPressure </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b2_in_config | bool) %}
		<Attribute name = "spfB2ManifoldOutOfRange" alias="spfB2ManifoldOutOfRange">
			<Description> SPF B2 manifold out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					if(ExpOnline)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Global alarm status */
					if( press &lt; {{spf_manifold_press_min_alarm}} or press &gt; {{spf_manifold_press_max_alarm}} )
					{
						res:= 'ALARM';
						return [0];
					};
					if( press &lt; {{spf_manifold_press_min_warn}} or press &gt; {{spf_manifold_press_max_warn}} )
					{
						res:= 'WARN';
						return [0];
					};
	 				
					res:= 'NORMAL';
					return [0];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b2ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> press </Label>	
						<Value> {{spf_controller}}/b2ManifoldPressure </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and (spf_enable_b3_in_config | bool or spf_enable_b4_in_config | bool or spf_enable_b5_in_config | bool) ) %}
		<Attribute name = "spfB345ManifoldOutOfRange" alias="spfB345ManifoldOutOfRange">
			<Description> SPF B345 manifold out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					if(ExpOnline3==0 and ExpOnline4==0 and ExpOnline5==0)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Global alarm status */
					if( press &lt; {{spf_manifold_press_min_alarm}} or press &gt; {{spf_manifold_press_max_alarm}} )
					{
						res:= 'ALARM';
						return [0];
					};
					if( press &lt; {{spf_manifold_press_min_warn}} or press &gt; {{spf_manifold_press_max_warn}} )
					{
						res:= 'WARN';
						return [0];
					};
	 				
					res:= 'NORMAL';
					return [0];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline3 </Label>	
						<Value> {{spf_controller}}/b3ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> ExpOnline4 </Label>	
						<Value> {{spf_controller}}/b4ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
					<FormulaVar>
						<Label> ExpOnline5 </Label>	
						<Value> {{spf_controller}}/b5ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> press </Label>	
						<Value> {{spf_controller}}/b345ManifoldPressure </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}


		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b1_in_config | bool and spf_enable_b2_in_config | bool and spf_enable_b3_in_config | bool and spf_enable_b4_in_config | bool and spf_enable_b5_in_config | bool) %}
		<Attribute name = "spfManifoldOutOfRange" alias="spfManifoldOutOfRange">
			<Description> SPF manifold out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Global alarm status */
					if( mani_b1=='ALARM' or mani_b2=='ALARM' or mani_b345=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( mani_b1=='WARN' or mani_b2=='WARN' or mani_b345=='WARN' )
					{
						res:= 'WARN';
						return [0];
					};
	 				if( mani_b1=='NORMAL' and mani_b2=='NORMAL' and mani_b345=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> mani_b1 </Label>	
						<Value> spfB1ManifoldOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> mani_b2 </Label>	
						<Value> spfB2ManifoldOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> mani_b345 </Label>	
						<Value> spfB345ManifoldOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

	{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b1_in_config | bool) %}
		<Attribute name = "spfB1RfeTempOutOfRange" alias="spfB1RfeTempOutOfRange">
			<Description> SPF B1 Rfe temperature out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var Temp1Status:= 'UNKNOWN';
					var Temp2Status:= 'UNKNOWN';

					if(ExpOnline)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* RFE 1st stage temp status */
					if(temp1 &lt; {{spf_rfe1_temp_min_alarm}} or temp1 &gt; {{spf_rfe1_temp_max_alarm}}) Temp1Status:= 'ALARM';
					else if(temp1 &lt; {{spf_rfe1_temp_min_warn}} or temp1 &gt; {{spf_rfe1_temp_max_warn}}) Temp1Status:= 'WARN';
					else Temp1Status:= 'NORMAL';

					/* RFE 2nd stage temp status */
					if(temp2 &lt; {{spf_rfe2_temp_min_alarm}} or temp2 &gt; {{spf_rfe2_temp_max_alarm}}) Temp2Status:= 'ALARM';
					else if(temp2 &lt; {{spf_rfe2_temp_min_warn}} or temp2 &gt; {{spf_rfe2_temp_max_warn}}) Temp2Status:= 'WARN';
					else Temp2Status:= 'NORMAL';

					/* Global alarm status */
					if( Temp1Status=='ALARM' or Temp2Status=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( Temp1Status=='WARN' or Temp2Status=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( Temp1Status=='NORMAL' and Temp2Status=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b1ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp1 </Label>	
						<Value> {{spf_controller}}/b1Rfe1Temperature </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp2 </Label>	
						<Value> {{spf_controller}}/b1Rfe2Temperature </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b2_in_config | bool) %}
		<Attribute name = "spfB2RfeTempOutOfRange" alias="spfB2RfeTempOutOfRange">
			<Description> SPF B2 Rfe temperature out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var Temp1Status:= 'UNKNOWN';
					var Temp2Status:= 'UNKNOWN';

					if(ExpOnline)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* RFE 1st stage temp status */
					if(temp1 &lt; {{spf_rfe1_temp_min_alarm}} or temp1 &gt; {{spf_rfe1_temp_max_alarm}}) Temp1Status:= 'ALARM';
					else if(temp1 &lt; {{spf_rfe1_temp_min_warn}} or temp1 &gt; {{spf_rfe1_temp_max_warn}}) Temp1Status:= 'WARN';
					else Temp1Status:= 'NORMAL';

					/* RFE 2nd stage temp status */
					if(temp2 &lt; {{spf_rfe2_temp_min_alarm}} or temp2 &gt; {{spf_rfe2_temp_max_alarm}}) Temp2Status:= 'ALARM';
					else if(temp2 &lt; {{spf_rfe2_temp_min_warn}} or temp2 &gt; {{spf_rfe2_temp_max_warn}}) Temp2Status:= 'WARN';
					else Temp2Status:= 'NORMAL';

					/* Global alarm status */
					if( Temp1Status=='ALARM' or Temp2Status=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( Temp1Status=='WARN' or Temp2Status=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( Temp1Status=='NORMAL' and Temp2Status=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b2ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp1 </Label>	
						<Value> {{spf_controller}}/b2Rfe1Temperature </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp2 </Label>	
						<Value> {{spf_controller}}/b2Rfe2Temperature </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b3_in_config | bool) %}
		<Attribute name = "spfB3RfeTempOutOfRange" alias="spfB3RfeTempOutOfRange">
			<Description> SPF B3 Rfe temperature out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var Temp1Status:= 'UNKNOWN';
					var Temp2Status:= 'UNKNOWN';

					if(ExpOnline)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* RFE 1st stage temp status */
					if(temp1 &lt; {{spf_rfe1_temp_min_alarm}} or temp1 &gt; {{spf_rfe1_temp_max_alarm}}) Temp1Status:= 'ALARM';
					else if(temp1 &lt; {{spf_rfe1_temp_min_warn}} or temp1 &gt; {{spf_rfe1_temp_max_warn}}) Temp1Status:= 'WARN';
					else Temp1Status:= 'NORMAL';

					/* RFE 2nd stage temp status */
					if(temp2 &lt; {{spf_rfe2_temp_min_alarm}} or temp2 &gt; {{spf_rfe2_temp_max_alarm}}) Temp2Status:= 'ALARM';
					else if(temp2 &lt; {{spf_rfe2_temp_min_warn}} or temp2 &gt; {{spf_rfe2_temp_max_warn}}) Temp2Status:= 'WARN';
					else Temp2Status:= 'NORMAL';

					/* Global alarm status */
					if( Temp1Status=='ALARM' or Temp2Status=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( Temp1Status=='WARN' or Temp2Status=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( Temp1Status=='NORMAL' and Temp2Status=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b3ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp1 </Label>	
						<Value> {{spf_controller}}/b3Rfe1Temperature </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp2 </Label>	
						<Value> {{spf_controller}}/b3Rfe2Temperature </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}


		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b4_in_config | bool) %}
		<Attribute name = "spfB4RfeTempOutOfRange" alias="spfB4RfeTempOutOfRange">
			<Description> SPF B4 Rfe temperature out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var Temp1Status:= 'UNKNOWN';
					var Temp2Status:= 'UNKNOWN';

					if(ExpOnline)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* RFE 1st stage temp status */
					if(temp1 &lt; {{spf_rfe1_temp_min_alarm}} or temp1 &gt; {{spf_rfe1_temp_max_alarm}}) Temp1Status:= 'ALARM';
					else if(temp1 &lt; {{spf_rfe1_temp_min_warn}} or temp1 &gt; {{spf_rfe1_temp_max_warn}}) Temp1Status:= 'WARN';
					else Temp1Status:= 'NORMAL';

					/* RFE 2nd stage temp status */
					if(temp2 &lt; {{spf_rfe2_temp_min_alarm}} or temp2 &gt; {{spf_rfe2_temp_max_alarm}}) Temp2Status:= 'ALARM';
					else if(temp2 &lt; {{spf_rfe2_temp_min_warn}} or temp2 &gt; {{spf_rfe2_temp_max_warn}}) Temp2Status:= 'WARN';
					else Temp2Status:= 'NORMAL';

					/* Global alarm status */
					if( Temp1Status=='ALARM' or Temp2Status=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( Temp1Status=='WARN' or Temp2Status=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( Temp1Status=='NORMAL' and Temp2Status=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b4ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp1 </Label>	
						<Value> {{spf_controller}}/b4Rfe1Temperature </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp2 </Label>	
						<Value> {{spf_controller}}/b4Rfe2Temperature </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}


		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b5_in_config | bool) %}
		<Attribute name = "spfB5RfeTempOutOfRange" alias="spfB5RfeTempOutOfRange">
			<Description> SPF B5 Rfe temperature out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Init status flags */
					var Temp1Status:= 'UNKNOWN';
					var Temp2Status:= 'UNKNOWN';

					if(ExpOnline)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* RFE 1st stage temp status */
					if(temp1 &lt; {{spf_rfe1_temp_min_alarm}} or temp1 &gt; {{spf_rfe1_temp_max_alarm}}) Temp1Status:= 'ALARM';
					else if(temp1 &lt; {{spf_rfe1_temp_min_warn}} or temp1 &gt; {{spf_rfe1_temp_max_warn}}) Temp1Status:= 'WARN';
					else Temp1Status:= 'NORMAL';

					/* RFE 2nd stage temp status */
					if(temp2 &lt; {{spf_rfe2_temp_min_alarm}} or temp2 &gt; {{spf_rfe2_temp_max_alarm}}) Temp2Status:= 'ALARM';
					else if(temp2 &lt; {{spf_rfe2_temp_min_warn}} or temp2 &gt; {{spf_rfe2_temp_max_warn}}) Temp2Status:= 'WARN';
					else Temp2Status:= 'NORMAL';

					/* Global alarm status */
					if( Temp1Status=='ALARM' or Temp2Status=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( Temp1Status=='WARN' or Temp2Status=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( Temp1Status=='NORMAL' and Temp2Status=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b5ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp1 </Label>	
						<Value> {{spf_controller}}/b5Rfe1Temperature </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp2 </Label>	
						<Value> {{spf_controller}}/b5Rfe2Temperature </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b1_in_config | bool and spf_enable_b2_in_config | bool and spf_enable_b3_in_config | bool and spf_enable_b4_in_config | bool and spf_enable_b5_in_config | bool) %}
		<Attribute name = "spfRfeTempOutOfRange" alias="spfRfeTempOutOfRange">
			<Description> SPF Rfe temp out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Global alarm status */
					if( temp_b1=='ALARM' or temp_b2=='ALARM' or temp_b3=='ALARM' or temp_b4=='ALARM' or temp_b5=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( temp_b1=='WARN' or temp_b2=='WARN' or temp_b3=='WARN' or temp_b4=='WARN' or temp_b5=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( temp_b1=='NORMAL' and temp_b2=='NORMAL' and temp_b3=='NORMAL' and temp_b4=='NORMAL' and temp_b5=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> temp_b1 </Label>	
						<Value> spfB1RfeTempOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp_b2 </Label>	
						<Value> spfB2RfeTempOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp_b3 </Label>	
						<Value> spfB3RfeTempOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp_b4 </Label>	
						<Value> spfB4RfeTempOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp_b5 </Label>	
						<Value> spfB5RfeTempOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}



		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b1_in_config | bool) %}
		<Attribute name = "spfB1OmtTempOutOfRange" alias="spfB1OmtTempOutOfRange">
			<Description> SPF B1 Omt temperature out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					if(ExpOnline)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Global alarm status */
					if( temp &lt; {{spf_omt_temp_min_alarm}} or temp &gt; {{spf_omt_temp_max_alarm}} )
					{
						res:= 'ALARM';
						return [0];
					};
					if( temp &lt; {{spf_omt_temp_min_warn}} or temp &gt; {{spf_omt_temp_max_warn}} )
					{
						res:= 'WARN';
						return [0];
					};
					res:= 'NORMAL';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b1ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp </Label>	
						<Value> {{spf_controller}}/b1OmtTemperature </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b2_in_config | bool) %}
		<Attribute name = "spfB2OmtTempOutOfRange" alias="spfB2OmtTempOutOfRange">
			<Description> SPF B2 Omt temperature out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					if(ExpOnline)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Global alarm status */
					if( temp &lt; {{spf_omt_temp_min_alarm}} or temp &gt; {{spf_omt_temp_max_alarm}} )
					{
						res:= 'ALARM';
						return [0];
					};
					if( temp &lt; {{spf_omt_temp_min_warn}} or temp &gt; {{spf_omt_temp_max_warn}} )
					{
						res:= 'WARN';
						return [0];
					};
					res:= 'NORMAL';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b2ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp </Label>	
						<Value> {{spf_controller}}/b2OmtTemperature </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b3_in_config | bool) %}
		<Attribute name = "spfB3OmtTempOutOfRange" alias="spfB3OmtTempOutOfRange">
			<Description> SPF B1 Omt temperature out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					if(ExpOnline)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Global alarm status */
					if( temp &lt; {{spf_omt_temp_min_alarm}} or temp &gt; {{spf_omt_temp_max_alarm}} )
					{
						res:= 'ALARM';
						return [0];
					};
					if( temp &lt; {{spf_omt_temp_min_warn}} or temp &gt; {{spf_omt_temp_max_warn}} )
					{
						res:= 'WARN';
						return [0];
					};
					res:= 'NORMAL';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b3ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp </Label>	
						<Value> {{spf_controller}}/b3OmtTemperature </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b4_in_config | bool) %}
		<Attribute name = "spfB4OmtTempOutOfRange" alias="spfB4OmtTempOutOfRange">
			<Description> SPF B4 Omt temperature out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					if(ExpOnline)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Global alarm status */
					if( temp &lt; {{spf_omt_temp_min_alarm}} or temp &gt; {{spf_omt_temp_max_alarm}} )
					{
						res:= 'ALARM';
						return [0];
					};
					if( temp &lt; {{spf_omt_temp_min_warn}} or temp &gt; {{spf_omt_temp_max_warn}} )
					{
						res:= 'WARN';
						return [0];
					};
					res:= 'NORMAL';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b4ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp </Label>	
						<Value> {{spf_controller}}/b4OmtTemperature </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b5_in_config | bool) %}
		<Attribute name = "spfB5OmtTempOutOfRange" alias="spfB5OmtTempOutOfRange">
			<Description> SPF B5 Omt temperature out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					if(ExpOnline)
					{
						res:= 'NORMAL';
						return [0];
					};

					/* Global alarm status */
					if( temp &lt; {{spf_omt_temp_min_alarm}} or temp &gt; {{spf_omt_temp_max_alarm}} )
					{
						res:= 'ALARM';
						return [0];
					};
					if( temp &lt; {{spf_omt_temp_min_warn}} or temp &gt; {{spf_omt_temp_max_warn}} )
					{
						res:= 'WARN';
						return [0];
					};
					res:= 'NORMAL';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> ExpOnline </Label>	
						<Value> {{spf_controller}}/b5ExpectedOnline </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp </Label>	
						<Value> {{spf_controller}}/b5OmtTemperature </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b1_in_config | bool and spf_enable_b2_in_config | bool and spf_enable_b3_in_config | bool and spf_enable_b4_in_config | bool and spf_enable_b5_in_config | bool) %}
		<Attribute name = "spfOmtTempOutOfRange" alias="spfOmtTempOutOfRange">
			<Description> SPF Omt temperature out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Global alarm status */
					if( temp_b1=='ALARM' or temp_b2=='ALARM' or temp_b3=='ALARM' or temp_b4=='ALARM' or temp_b5=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( temp_b1=='WARN' or temp_b2=='WARN' or temp_b3=='WARN' or temp_b4=='WARN' or temp_b5=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( temp_b1=='NORMAL' and temp_b2=='NORMAL' and temp_b3=='NORMAL' and temp_b4=='NORMAL' and temp_b5=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> temp_b1 </Label>	
						<Value> spfB1OmtTempOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp_b2 </Label>	
						<Value> spfB2OmtTempOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp_b3 </Label>	
						<Value> spfB3OmtTempOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp_b4 </Label>	
						<Value> spfB4OmtTempOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp_b5 </Label>	
						<Value> spfB5OmtTempOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}



		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b1_in_config | bool) %}
		<Attribute name = "spfB1CryocoolStage1TempOutOfRange" alias="spfB1CryocoolStage1TempOutOfRange">
			<Description> SPF B1 cryocooler temperature out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Global alarm status */
					if( temp &lt; {{spf_cryocooler_stage1_temp_min_alarm}} or temp &gt; {{spf_cryocooler_stage1_temp_max_alarm}} )
					{
						res:= 'ALARM';
						return [0];
					};
					if( temp &lt; {{spf_cryocooler_stage1_temp_min_warn}} or temp &gt; {{spf_cryocooler_stage1_temp_max_warn}} )
					{
						res:= 'WARN';
						return [0];
					};
					res:= 'NORMAL';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> temp </Label>	
						<Value> {{spf_controller}}/b1CryocoolStage1Temp </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b2_in_config | bool) %}
		<Attribute name = "spfB2CryocoolStage1TempOutOfRange" alias="spfB2CryocoolStage1TempOutOfRange">
			<Description> SPF B2 cryocooler temperature out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Global alarm status */
					if( temp &lt; {{spf_cryocooler_stage1_temp_min_alarm}} or temp &gt; {{spf_cryocooler_stage1_temp_max_alarm}} )
					{
						res:= 'ALARM';
						return [0];
					};
					if( temp &lt; {{spf_cryocooler_stage1_temp_min_warn}} or temp &gt; {{spf_cryocooler_stage1_temp_max_warn}} )
					{
						res:= 'WARN';
						return [0];
					};
					res:= 'NORMAL';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> temp </Label>	
						<Value> {{spf_controller}}/b2CryocoolStage1Temp </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b3_in_config | bool) %}
		<Attribute name = "spfB3CryocoolStage1TempOutOfRange" alias="spfB3CryocoolStage1TempOutOfRange">
			<Description> SPF B3 cryocooler temperature out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Global alarm status */
					if( temp &lt; {{spf_cryocooler_stage1_temp_min_alarm}} or temp &gt; {{spf_cryocooler_stage1_temp_max_alarm}} )
					{
						res:= 'ALARM';
						return [0];
					};
					if( temp &lt; {{spf_cryocooler_stage1_temp_min_warn}} or temp &gt; {{spf_cryocooler_stage1_temp_max_warn}} )
					{
						res:= 'WARN';
						return [0];
					};
					res:= 'NORMAL';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> temp </Label>	
						<Value> {{spf_controller}}/b3CryocoolStage1Temp </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b4_in_config | bool) %}
		<Attribute name = "spfB4CryocoolStage1TempOutOfRange" alias="spfB4CryocoolStage1TempOutOfRange">
			<Description> SPF B4 cryocooler temperature out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Global alarm status */
					if( temp &lt; {{spf_cryocooler_stage1_temp_min_alarm}} or temp &gt; {{spf_cryocooler_stage1_temp_max_alarm}} )
					{
						res:= 'ALARM';
						return [0];
					};
					if( temp &lt; {{spf_cryocooler_stage1_temp_min_warn}} or temp &gt; {{spf_cryocooler_stage1_temp_max_warn}} )
					{
						res:= 'WARN';
						return [0];
					};
					res:= 'NORMAL';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> temp </Label>	
						<Value> {{spf_controller}}/b4CryocoolStage1Temp </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b5_in_config | bool) %}
		<Attribute name = "spfB5CryocoolStage1TempOutOfRange" alias="spfB5CryocoolStage1TempOutOfRange">
			<Description> SPF B5 cryocooler temperature out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Global alarm status */
					if( temp &lt; {{spf_cryocooler_stage1_temp_min_alarm}} or temp &gt; {{spf_cryocooler_stage1_temp_max_alarm}} )
					{
						res:= 'ALARM';
						return [0];
					};
					if( temp &lt; {{spf_cryocooler_stage1_temp_min_warn}} or temp &gt; {{spf_cryocooler_stage1_temp_max_warn}} )
					{
						res:= 'WARN';
						return [0];
					};
					res:= 'NORMAL';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> temp </Label>	
						<Value> {{spf_controller}}/b5CryocoolStage1Temp </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> FLOAT </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}


		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b1_in_config | bool and spf_enable_b2_in_config | bool and spf_enable_b3_in_config | bool and spf_enable_b4_in_config | bool and spf_enable_b5_in_config | bool) %}
		<Attribute name = "spfCryocoolStage1TempOutOfRange" alias="spfCryocoolStage1TempOutOfRange">
			<Description> SPF Cryooler temperature for stage 1 out of range </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> NORMAL </Value> 		
				<Value> WARN </Value>   
				<Value> ALARM </Value>   		
			</PossibleValues>
			<Polling> 
				<Period> {{dshmon_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmon_default_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmon_default_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					/* Global alarm status */
					if( temp_b1=='ALARM' or temp_b2=='ALARM' or temp_b3=='ALARM' or temp_b4=='ALARM' or temp_b5=='ALARM')
					{
						res:= 'ALARM';
						return [0];
					};
					if( temp_b1=='WARN' or temp_b2=='WARN' or temp_b3=='WARN' or temp_b4=='WARN' or temp_b5=='WARN')
					{
						res:= 'WARN';
						return [0];
					};
	 				if( temp_b1=='NORMAL' and temp_b2=='NORMAL' and temp_b3=='NORMAL' and temp_b4=='NORMAL' and temp_b5=='NORMAL')
					{
						res:= 'NORMAL';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> temp_b1 </Label>	
						<Value> spfB1CryocoolStage1TempOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp_b2 </Label>	
						<Value> spfB2CryocoolStage1TempOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp_b3 </Label>	
						<Value> spfB3CryocoolStage1TempOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp_b4 </Label>	
						<Value> spfB4CryocoolStage1TempOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> temp_b5 </Label>	
						<Value> spfB5CryocoolStage1TempOutOfRange </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<!--<Value> CHANGE </Value>-->
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>			
		{% endif %}

		<!-- ************************************************** -->
		<!--               FWD ATTRS                            -->
		<!-- ************************************************** -->
		

		
		<!-- == SPF fwd attributes == -->
		
		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b1_in_config | bool) %}
		<FwdAttribute name = "spfB1ExpectedOnline" alias="spfB1ExpectedOnline">
			<Label> spfB1ExpectedOnline </Label>
			<Url> {{spf_controller}}/b1ExpectedOnline </Url>
		</FwdAttribute>
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b2_in_config | bool) %}
		<FwdAttribute name = "spfB2ExpectedOnline" alias="spfB2ExpectedOnline">
			<Label> spfB2ExpectedOnline </Label>
			<Url> {{spf_controller}}/b2ExpectedOnline </Url>
		</FwdAttribute>
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b3_in_config | bool) %}
		<FwdAttribute name = "spfB3ExpectedOnline" alias="spfB3ExpectedOnline">
			<Label> spfB3ExpectedOnline </Label>
			<Url> {{spf_controller}}/b3ExpectedOnline </Url>
		</FwdAttribute>
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b4_in_config | bool) %}
		<FwdAttribute name = "spfB4ExpectedOnline" alias="spfB4ExpectedOnline">
			<Label> spfB4ExpectedOnline </Label>
			<Url> {{spf_controller}}/b4ExpectedOnline </Url>
		</FwdAttribute>
		{% endif %}

		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b5_in_config | bool) %}
		<FwdAttribute name = "spfB5ExpectedOnline" alias="spfB5ExpectedOnline">
			<Label> spfB5ExpectedOnline </Label>
			<Url> {{spf_controller}}/b5ExpectedOnline </Url>
		</FwdAttribute>
		{% endif %}

		<!-- SPFC Controller attrs -->
		<FwdAttribute name = "spfcSupplyCurrent" alias="spfcSupplyCurrent">
			<Label> spfcSupplyCurrent </Label>
			<Url> {{spf_controller}}/spfcSupplyCurrent </Url>
		</FwdAttribute>

		<FwdAttribute name = "spfcSupplyVoltage" alias="spfcSupplyVoltage">
			<Label> spfcSupplyVoltage </Label>
			<Url> {{spf_controller}}/spfcSupplyVoltage </Url>
		</FwdAttribute>
		
		<FwdAttribute name = "spfcTemperature" alias="spfcTemperature">
			<Label> spfcTemperature </Label>
			<Url> {{spf_controller}}/spfcTemperature </Url>
		</FwdAttribute>

		<!-- Helium system attrs -->
 		<FwdAttribute name = "heCompSupplyPressure" alias="heCompSupplyPressure">
			<Label> heCompSupplyPressure </Label>
			<Url> {{spf_controller}}/heCompSupplyPressure </Url>
		</FwdAttribute>

		<FwdAttribute name = "heCompReturnPressure" alias="heCompReturnPressure">
			<Label> heCompReturnPressure </Label>
			<Url> {{spf_controller}}/heCompReturnPressure </Url>
		</FwdAttribute>

		<!-- Feed band attrs -->
		<!-- LNA B1 -->
		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b1_in_config | bool) %}
 		<FwdAttribute name = "b1LnaHDrainVoltage" alias="b1LnaHDrainVoltage">
			<Label> b1LnaHDrainVoltage </Label>
			<Url> {{spf_controller}}/b1LnaHDrainVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b1LnaVDrainVoltage" alias="b1LnaVDrainVoltage">
			<Label> b1LnaVDrainVoltage </Label>
			<Url> {{spf_controller}}/b1LnaVDrainVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b1LnaHGateVoltage" alias="b1LnaHGateVoltage">
			<Label> b1LnaHGateVoltage </Label>
			<Url> {{spf_controller}}/b1LnaHGateVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b1LnaVGateVoltage" alias="b1LnaVGateVoltage">
			<Label> b1LnaVGateVoltage </Label>
			<Url> {{spf_controller}}/b1LnaVGateVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b1LnaHDrainCurrent" alias="b1LnaHDrainCurrent">
			<Label> b1LnaHDrainCurrent </Label>
			<Url> {{spf_controller}}/b1LnaHDrainCurrent </Url>
		</FwdAttribute>

		<FwdAttribute name = "b1LnaVDrainCurrent" alias="b1LnaVDrainCurrent">
			<Label> b1LnaVDrainCurrent </Label>
			<Url> {{spf_controller}}/b1LnaVDrainCurrent </Url>
		</FwdAttribute>
		{% endif %}

		<!-- LNA B2 -->
		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b2_in_config | bool) %}
		<FwdAttribute name = "b2LnaHDrainVoltage" alias="b2LnaHDrainVoltage">
			<Label> b2LnaHDrainVoltage </Label>
			<Url> {{spf_controller}}/b2LnaHDrainVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b2LnaVDrainVoltage" alias="b2LnaVDrainVoltage">
			<Label> b2LnaVDrainVoltage </Label>
			<Url> {{spf_controller}}/b2LnaVDrainVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b2LnaHGateVoltage" alias="b2LnaHGateVoltage">
			<Label> b2LnaHGateVoltage </Label>
			<Url> {{spf_controller}}/b2LnaHGateVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b2LnaVGateVoltage" alias="b2LnaVGateVoltage">
			<Label> b2LnaVGateVoltage </Label>
			<Url> {{spf_controller}}/b2LnaVGateVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b2LnaHDrainCurrent" alias="b2LnaHDrainCurrent">
			<Label> b2LnaHDrainCurrent </Label>
			<Url> {{spf_controller}}/b2LnaHDrainCurrent </Url>
		</FwdAttribute>

		<FwdAttribute name = "b2LnaVDrainCurrent" alias="b2LnaVDrainCurrent">
			<Label> b2LnaVDrainCurrent </Label>
			<Url> {{spf_controller}}/b2LnaVDrainCurrent </Url>
		</FwdAttribute>
		{% endif %}

		<!-- LNA B3 -->
		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b3_in_config | bool) %}
		<FwdAttribute name = "b3LnaHDrainVoltage" alias="b3LnaHDrainVoltage">
			<Label> b3LnaHDrainVoltage </Label>
			<Url> {{spf_controller}}/b3LnaHDrainVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b3LnaVDrainVoltage" alias="b3LnaVDrainVoltage">
			<Label> b3LnaVDrainVoltage </Label>
			<Url> {{spf_controller}}/b3LnaVDrainVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b3LnaHGateVoltage" alias="b3LnaHGateVoltage">
			<Label> b3LnaHGateVoltage </Label>
			<Url> {{spf_controller}}/b3LnaHGateVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b3LnaVGateVoltage" alias="b3LnaVGateVoltage">
			<Label> b3LnaVGateVoltage </Label>
			<Url> {{spf_controller}}/b3LnaVGateVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b3LnaHDrainCurrent" alias="b3LnaHDrainCurrent">
			<Label> b3LnaHDrainCurrent </Label>
			<Url> {{spf_controller}}/b3LnaHDrainCurrent </Url>
		</FwdAttribute>

		<FwdAttribute name = "b3LnaVDrainCurrent" alias="b3LnaVDrainCurrent">
			<Label> b3LnaVDrainCurrent </Label>
			<Url> {{spf_controller}}/b3LnaVDrainCurrent </Url>
		</FwdAttribute>
		{% endif %}

		<!-- LNA B4 -->
		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b4_in_config | bool) %}
		<FwdAttribute name = "b4LnaHDrainVoltage" alias="b4LnaHDrainVoltage">
			<Label> b4LnaHDrainVoltage </Label>
			<Url> {{spf_controller}}/b4LnaHDrainVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b4LnaVDrainVoltage" alias="b4LnaVDrainVoltage">
			<Label> b4LnaVDrainVoltage </Label>
			<Url> {{spf_controller}}/b4LnaVDrainVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b4LnaHGateVoltage" alias="b4LnaHGateVoltage">
			<Label> b4LnaHGateVoltage </Label>
			<Url> {{spf_controller}}/b4LnaHGateVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b4LnaVGateVoltage" alias="b4LnaVGateVoltage">
			<Label> b4LnaVGateVoltage </Label>
			<Url> {{spf_controller}}/b4LnaVGateVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b4LnaHDrainCurrent" alias="b4LnaHDrainCurrent">
			<Label> b4LnaHDrainCurrent </Label>
			<Url> {{spf_controller}}/b4LnaHDrainCurrent </Url>
		</FwdAttribute>

		<FwdAttribute name = "b4LnaVDrainCurrent" alias="b4LnaVDrainCurrent">
			<Label> b4LnaVDrainCurrent </Label>
			<Url> {{spf_controller}}/b4LnaVDrainCurrent </Url>
		</FwdAttribute>
		{% endif %}

		<!-- LNA B5 -->
		{% if lmc_config_mode == 'full' or (lmc_config_mode == 'spf' and spf_enable_b5_in_config | bool) %}
		<FwdAttribute name = "b45LnaHDrainVoltage" alias="b5LnaHDrainVoltage">
			<Label> b5LnaHDrainVoltage </Label>
			<Url> {{spf_controller}}/b5LnaHDrainVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b5LnaVDrainVoltage" alias="b5LnaVDrainVoltage">
			<Label> b5LnaVDrainVoltage </Label>
			<Url> {{spf_controller}}/b5LnaVDrainVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b5LnaHGateVoltage" alias="b5LnaHGateVoltage">
			<Label> b5LnaHGateVoltage </Label>
			<Url> {{spf_controller}}/b5LnaHGateVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b5LnaVGateVoltage" alias="b5LnaVGateVoltage">
			<Label> b5LnaVGateVoltage </Label>
			<Url> {{spf_controller}}/b5LnaVGateVoltage </Url>
		</FwdAttribute>

		<FwdAttribute name = "b5LnaHDrainCurrent" alias="b5LnaHDrainCurrent">
			<Label> b5LnaHDrainCurrent </Label>
			<Url> {{spf_controller}}/b5LnaHDrainCurrent </Url>
		</FwdAttribute>

		<FwdAttribute name = "b5LnaVDrainCurrent" alias="b5LnaVDrainCurrent">
			<Label> b5LnaVDrainCurrent </Label>
			<Url> {{spf_controller}}/b5LnaVDrainCurrent </Url>
		</FwdAttribute>
		{% endif %}
		
	</Attributes>

</DeviceConfiguration>



