#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        SKAGroup.py
#
#  Project :     
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      stephanie$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["SKAGroup", "SKAGroupClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
from SKABaseDevice import SKABaseDevice, SKABaseDeviceClass
# Add additional import
#----- PROTECTED REGION ID(SKAGroup.additionnal_import) ENABLED START -----#

#----- PROTECTED REGION END -----#	//	SKAGroup.additionnal_import

# Device States Description
# ON : 
# OFF : 
# FAULT : 
# INIT : 
# ALARM : 
# UNKNOWN : 
# STANDBY : Equates to LOW-POWER mode.\nThis is the initial transition from INIT \nif the device supports a low-power mode.


class SKAGroup (SKABaseDevice):
    """A class which holds a number of proxies to members"""
    
    # -------- Add you global variables here --------------------------
    # ----- PROTECTED REGION ID(SKAGroup.global_variables) ENABLED START -----#


    # ----- PROTECTED REGION END -----#	//	SKAGroup.global_variables

    def __init__(self, cl, name):
        super(SKAGroup,self).__init__(cl,name)
        self.debug_stream("In __init__()")
        SKAGroup.init_device(self)
        # ----- PROTECTED REGION ID(SKAGroup.__init__) ENABLED START -----#
        self.device_groups = {}
        # ----- PROTECTED REGION END -----#	//	SKAGroup.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        # ----- PROTECTED REGION ID(SKAGroup.delete_device) ENABLED START -----#

        # ----- PROTECTED REGION END -----#	//	SKAGroup.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_members_state_read = PyTango.DevState.UNKNOWN
        self.attr_centralLoggingLevel_read = 0
        self.attr_elementLoggingLevel_read = 0
        self.attr_storageLoggingLevel_read = 0
        self.attr_buildState_read = ""
        self.attr_versionId_read = ""
        self.attr_healthState_read = ''
        self.attr_adminMode_read = ''
        self.attr_controlMode_read = ''
        self.attr_simulationMode_read = False
        self.attr_testMode_read = ""
        # ----- PROTECTED REGION ID(SKAGroup.init_device) ENABLED START -----#

        # ----- PROTECTED REGION END -----#	//	SKAGroup.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        # ----- PROTECTED REGION ID(SKAGroup.always_executed_hook) ENABLED START -----#

        # ----- PROTECTED REGION END -----#	//	SKAGroup.always_executed_hook

    # -------------------------------------------------------------------------
    #    SKAGroup read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_members_state(self, attr):
        self.debug_stream("In read_members_state()")
        # ----- PROTECTED REGION ID(SKAGroup.members_state_read) ENABLED START -----#
        group = PyTango.Group("members")

        for members_list_name in self.member_list:
            members = self.__dict__[members_list_name]  # eg tiles variable
            group.add(members)
        group_replies = group.read_attribute('visual_state')

        statuses = []
        for group_reply in group_replies:
            device_attr = group_reply.get_data()
            # If device proxy for the member fails (eg tile_ds not running),
            # the Device attribute will have Name not Set as the value for name
            if device_attr.name.lower() != 'visual_state':
                statuses.append(None)
                # device proxy cannot connect: something is wrong
            else:
                statuses.append(device_attr.value)

        status_set = set(statuses)

        if (PyTango.DevState.FAULT in status_set):
            self.attr_members_state_read = PyTango.DevState.FAULT
            self.set_state(PyTango.DevState.FAULT)

        elif (PyTango.DevState.ALARM in status_set or None in status_set):
            self.attr_members_state_read = PyTango.DevState.ALARM
        else:
            self.attr_members_state_read = PyTango.DevState.ON

        attr.set_value(self.attr_members_state_read)

        # ----- PROTECTED REGION END -----#	//	SKAGroup.members_state_read
        
    def write_members_state(self, attr):
        self.debug_stream("In write_members_state()")
        data = attr.get_write_value()
        # ----- PROTECTED REGION ID(SKAGroup.members_state_write) ENABLED START -----#

        # ----- PROTECTED REGION END -----#	//	SKAGroup.members_state_write
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        # ----- PROTECTED REGION ID(SKAGroup.read_attr_hardware) ENABLED START -----#

        # ----- PROTECTED REGION END -----#	//	SKAGroup.read_attr_hardware


    # -------------------------------------------------------------------------
    #    SKAGroup command methods
    # -------------------------------------------------------------------------
    
    def add_member(self, argin):
        """ Adds a member to a group, so that future subscriptions and alarms made to the group will also apply to the new member
        :param argin: [{`name`: `device_name`, `type`:`str`},]
        :type argin: PyTango.DevString
        """
        self.debug_stream("In add_member()")
        # ----- PROTECTED REGION ID(SKAGroup.add_member) ENABLED START -----#
        try:
            # Group
            member_data = json.loads(argin)
            group_name = str(member_data.get('group_name'))
            group = PyTango.Group('new_member_group')
            group.add([member_data.get('device_name')])
            dp = PyTango.DeviceProxy(self.get_name())
            db_datum = PyTango.DbDatum()
            db_datum.name = group_name

            members = set(list(dp.get_property(group_name)[group_name]) + list(group.get_device_list()))
            for member in members:
                db_datum.value_string.append(member)

            dp.put_property(db_datum)
            self.get_device_properties()

        except (PyTango.DevFailed, Exception) as df:
            self._generic_fatal_stream(command_name=inspect.stack()[0][3],
                                       command_inputs=str(argin),
                                       message=str(df))
            PyTango.Except.re_throw_exception(df,
                                              "AAVS_CommandFailed",
                                              "Device command failed",
                                              str(self.__class__.__name__) + "." + str(
                                                  inspect.stack()[0][3] + "()"))
            # ----- PROTECTED REGION END -----#	//	SKAGroup.add_member
        
    def remove_member(self, argin):
        """ 
        :param argin: [{`name`: `device_name`, `type`:`str`} ]
        :type argin: PyTango.DevString
        """
        self.debug_stream("In remove_member()")
        # ----- PROTECTED REGION ID(SKAGroup.remove_member) ENABLED START -----#
        try:
            member_data = json.loads(argin)
            group_name = member_data.get('group_name')
            device_name = member_data.get('device_name')
            dp = PyTango.DeviceProxy(self.get_name())
            property_list = dp.get_property(group_name)
            members = property_list[group_name]

            dp = PyTango.DeviceProxy(self.get_name())
            db_datum = PyTango.DbDatum()
            db_datum.name = group_name

            for member in members:
                if member != device_name:
                    db_datum.value_string.append(member)

            dp.put_property(db_datum)

        except (PyTango.DevFailed, Exception) as df:
            self._generic_fatal_stream(command_name=inspect.stack()[0][3],
                                       command_inputs=str(argin),
                                       message=str(df))
            PyTango.Except.re_throw_exception(df,
                                              "AAVS_CommandFailed",
                                              "Device command failed",
                                              str(self.__class__.__name__) + "." + str(
                                                  inspect.stack()[0][3] + "()"))
            # ----- PROTECTED REGION END -----#	//	SKAGroup.remove_member
        
    def run_command(self, argin):
        """ 
        :param argin: 
            [{`name`: `cmd_name`, `type`:`str`},
            {`name`: `cmd_args`, `type`:`json`}, 
            {`name`: `device_name`, `type`:`str`} ]
        :type argin: PyTango.DevString
        :rtype: PyTango.DevString
        """
        self.debug_stream("In run_command()")
        argout = ""
        # ----- PROTECTED REGION ID(SKAGroup.run_command) ENABLED START -----#
        try:
            argout = ''

        except (PyTango.DevFailed, Exception) as df:
            self._generic_fatal_stream(command_name=inspect.stack()[0][3],
                                       command_inputs=str(argin),
                                       message=str(df))
            PyTango.Except.re_throw_exception(df,
                                              "AAVS_CommandFailed",
                                              "Device command failed",
                                              str(self.__class__.__name__) + "." + str(
                                                  inspect.stack()[0][3] + "()"))
        # ----- PROTECTED REGION END -----#	//	SKAGroup.run_command
        return argout
        
    def get_member_names(self, argin):
        """ Json list of members of this group, optionally filtered by component_type
        :param argin: [{`name`: `component_type`, `type`:`str`, `default`: ``}]
        :type argin: PyTango.DevString
        :rtype: PyTango.DevString
        """
        self.debug_stream("In get_member_names()")
        argout = ""
        # ----- PROTECTED REGION ID(SKAGroup.get_member_names) ENABLED START -----#
        args = json.loads(argin)
        type_filter = args.get("component_type", None)
        if type(type_filter) is list:
            member_names = self.get_members(type_filter)
        else:
            member_names = self.get_members()

        argout = json.dumps({'member_device_names': member_names})
        # ----- PROTECTED REGION END -----#	//	SKAGroup.get_member_names
        return argout
        

    # ----- PROTECTED REGION ID(SKAGroup.programmer_methods) ENABLED START -----#

    def set_alarms(self):

        self.debug_stream("Setting alarms for {}".format(self.get_name()))

        alarm_def = {'alarms': [{'address': '{}/members_state'.format(self.get_name()),
                                 'checks': [{'type': 'STATUS_FIELD', 'value': 'ALARM'}],
                                 'name': 'members_state_alarm'}]}
        self.create_local_alarm(alarm_def, 5000)

        self.debug_stream("Created {}/{}".format(self.get_name(), "members_state_alarm"))

        state_alarm = {'alarms': [{'address': '{}/state'.format(self.get_name()),
                                   'checks': [{'type': 'STATUS_FIELD', 'value': 'FAULT'}],
                                   'name': 'state_alarm'}]}

        self.create_local_alarm(state_alarm, 5000)
        self.debug_stream("Created {}/{}".format(self.get_name(), "state_alarm"))

    def get_members(self, device_list_filter=None):
        # TODO implement filtering on this
        dp = PyTango.DeviceProxy(self.get_name())
        if type(device_list_filter) is list and len(device_list_filter):
            filter_groups = [self.device_groups[device] for device in device_list_filter]
            member_lists = [dp.get_property(member)[member] for member in self.member_list if member in filter_groups]
        else:
            member_lists = [dp.get_property(member)[member] for member in self.member_list]

        return list(itertools.chain.from_iterable(member_lists))

    def get_represention(self, argin):
        # import ipdb; ipdb.set_trace()
        details = super(SKAGroup, self).get_represention(argin)
        member_lists = [self.__dict__[member] for member in self.member_list]
        member_names = list(self.get_members())
        details["members"] = [{
                                  "component_type": name.split("/")[1],
                                  "component_id": name.split("/")[2],
                                  "name": name
                              }
                              for name in member_names]

        return details

    def _group_call_error_check(self, group_replies):
        """
        This is a generic method that checks for errors in replies to group commands, reporting them to the error stream
        :param group_replies: An array of Tango group replies (output from group command_inout calls)
        :return:
        """
        errors = []
        for group_reply in group_replies:
            error_dict = None
            if group_reply.has_failed():
                device_type, device_id = get_tango_device_type_id(group_reply.dev_name())
                err_stack = group_reply.get_err_stack()

                error_dict = {}
                error_dict["component_type"] = device_type
                error_dict["component_id"] = device_id
                if err_stack:
                    error_dict["desc"] = err_stack[-1].desc
                    # error_dict["stack"] = map(self.extract_stack, err_stack)
                errors.append(error_dict)

            if len(errors):
                desc_list = [error["component_id"] + ': ' + error_dict["desc"] for error in errors]
                description = "\n".join(desc_list)
                self._generic_fatal_stream(command_name=inspect.stack()[0][3],
                                           command_inputs="",
                                           message=description)
                raise Exception(description)

    def update_initialisation_state(self):
        group = PyTango.Group("members")

        for members_list_name in self.member_list:
            members = self.__dict__[members_list_name]  # eg tiles variable
            group.add(members)
        group_replies = group.read_attribute('state')
        statuses = []
        for group_reply in group_replies:
            device_attr = group_reply.get_data()
            # If device proxy for the member fails (eg tile_ds not running),
            # the Device attribute will have Name not Set as the value for name
            if device_attr.name.lower() != 'state':
                statuses.append(None)
                # device proxy cannot connect: something is wrong
            else:
                statuses.append(device_attr.value)

        on_devices = [s for s in statuses if s == PyTango.DevState.ON or s == PyTango.DevState.STANDBY]
        all_members_on = len(on_devices) == len(group.get_device_list())
        if self.get_state() == PyTango.DevState.INIT and all_members_on:
            # if self.get_state() == PyTango.DevState.INIT and None not in statuses and PyTango.DevState.FAULT not in statuses:
            # we are waiting to transition to On state, making sure all the members are in a state which is not fault.
            self.set_state(PyTango.DevState.ON)
            # self.event_stream(str(statuses))
            self.event_stream("{} initialised".format(self.get_name()))
        if self.get_state() == PyTango.DevState.INIT and PyTango.DevState.FAULT in statuses:
            self.event_stream("{} failed to initialise because one of its members is in a FAULT state"
                              .format(self.get_name()))

            # ----- PROTECTED REGION END -----#	//	SKAGroup.programmer_methods

class SKAGroupClass(SKABaseDeviceClass):
    # -------- Add you global class variables here --------------------------
    # ----- PROTECTED REGION ID(SKAGroup.global_class_variables) ENABLED START -----#

    # ----- PROTECTED REGION END -----#	//	SKAGroup.global_class_variables


    #    Class Properties
    class_property_list = {
        }
    class_property_list.update(SKABaseDeviceClass.class_property_list)


    #    Device Properties
    device_property_list = {
        'member_list':
            [PyTango.DevVarStringArray, 
            "Holds device_name of members of the group",
            [] ],
        }
    device_property_list.update(SKABaseDeviceClass.device_property_list)


    #    Command definitions
    cmd_list = {
        'add_member':
            [[PyTango.DevString, "[{`name`: `device_name`, `type`:`str`},]"],
            [PyTango.DevVoid, "none"]],
        'remove_member':
            [[PyTango.DevString, "[{`name`: `device_name`, `type`:`str`} ]"],
            [PyTango.DevVoid, "none"]],
        'run_command':
            [[PyTango.DevString, "[{`name`: `cmd_name`, `type`:`str`},\n{`name`: `cmd_args`, `type`:`json`}, \n{`name`: `device_name`, `type`:`str`} ]"],
            [PyTango.DevString, "none"]],
        'get_member_names':
            [[PyTango.DevString, "[{`name`: `component_type`, `type`:`str`, `default`: ``}]"],
            [PyTango.DevString, "none"]],
        }
    cmd_list.update(SKABaseDeviceClass.cmd_list)


    #    Attribute definitions
    attr_list = {
        'members_state':
            [[PyTango.CmdArgType.DevState,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        }
    attr_list.update(SKABaseDeviceClass.attr_list)


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(SKAGroupClass, SKAGroup, 'SKAGroup')
        # ----- PROTECTED REGION ID(SKAGroup.add_classes) ENABLED START -----#

        # ----- PROTECTED REGION END -----#	//	SKAGroup.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
